{"version":3,"file":null,"sources":["../node_modules/yabh/src/index.js","../src/defaults.js","../src/utils.js","../src/Cache.js","../src/CacheFactory.js","../src/index.js"],"sourcesContent":["/**\n * @method bubbleUp\n * @param {array} heap The heap.\n * @param {function} weightFunc The weight function.\n * @param {number} n The index of the element to bubble up.\n */\nconst bubbleUp = function (heap, weightFunc, n) {\n  const element = heap[n]\n  const weight = weightFunc(element)\n  // When at 0, an element can not go up any further.\n  while (n > 0) {\n    // Compute the parent element's index, and fetch it.\n    let parentN = Math.floor((n + 1) / 2) - 1\n    let parent = heap[parentN]\n    // If the parent has a lesser weight, things are in order and we\n    // are done.\n    if (weight >= weightFunc(parent)) {\n      break\n    } else {\n      heap[parentN] = element\n      heap[n] = parent\n      n = parentN\n    }\n  }\n}\n\n/**\n * @method bubbleDown\n * @param {array} heap The heap.\n * @param {function} weightFunc The weight function.\n * @param {number} n The index of the element to sink down.\n */\nconst bubbleDown = function (heap, weightFunc, n) {\n  var length = heap.length\n  let node = heap[n]\n  let nodeWeight = weightFunc(node)\n\n  while (true) {\n    let child2N = (n + 1) * 2\n    let child1N = child2N - 1\n    let swap = null;\n    if (child1N < length) {\n      let child1 = heap[child1N]\n      let child1Weight = weightFunc(child1)\n      // If the score is less than our node's, we need to swap.\n      if (child1Weight < nodeWeight) {\n        swap = child1N\n      }\n    }\n    // Do the same checks for the other child.\n    if (child2N < length) {\n      let child2 = heap[child2N]\n      let child2Weight = weightFunc(child2)\n      if (child2Weight < (swap === null ? nodeWeight : weightFunc(heap[child1N]))) {\n        swap = child2N\n      }\n    }\n\n    if (swap === null) {\n      break\n    } else {\n      heap[n] = heap[swap]\n      heap[swap] = node\n      n = swap\n    }\n  }\n}\n\nfunction BinaryHeap (weightFunc, compareFunc) {\n  if (!weightFunc) {\n    weightFunc = function (x) { return x }\n  }\n  if (!compareFunc) {\n    compareFunc = function (x, y) { return x === y }\n  }\n  if (typeof weightFunc !== 'function') {\n    throw new Error('BinaryHeap([weightFunc][, compareFunc]): \"weightFunc\" must be a function!')\n  }\n  if (typeof compareFunc !== 'function') {\n    throw new Error('BinaryHeap([weightFunc][, compareFunc]): \"compareFunc\" must be a function!')\n  }\n  this.weightFunc = weightFunc\n  this.compareFunc = compareFunc\n  this.heap = []\n}\n\nlet BHProto = BinaryHeap.prototype\n\nBHProto.push = function (node) {\n  this.heap.push(node)\n  bubbleUp(this.heap, this.weightFunc, this.heap.length - 1)\n}\n\nBHProto.peek = function () {\n  return this.heap[0]\n}\n\nBHProto.pop = function () {\n  let front = this.heap[0]\n  let end = this.heap.pop()\n  if (this.heap.length > 0) {\n    this.heap[0] = end\n    bubbleDown(this.heap, this.weightFunc, 0)\n  }\n  return front\n}\n\nBHProto.remove = function (node) {\n  var length = this.heap.length\n  for (let i = 0; i < length; i++) {\n    if (this.compareFunc(this.heap[i], node)) {\n      let removed = this.heap[i]\n      let end = this.heap.pop()\n      if (i !== length - 1) {\n        this.heap[i] = end\n        bubbleUp(this.heap, this.weightFunc, i)\n        bubbleDown(this.heap, this.weightFunc, i)\n      }\n      return removed\n    }\n  }\n  return null\n}\n\nBHProto.removeAll = function () {\n  this.heap = []\n}\n\nBHProto.size = function () {\n  return this.heap.length\n}\n\nexport default BinaryHeap\n","export default {\n  capacity: Number.MAX_VALUE,\n  cacheFlushInterval: null,\n  deleteOnExpire: 'none',\n  enabled: true,\n  onExpire: null,\n  maxAge: Number.MAX_VALUE,\n  recycleFreq: 1000,\n  storageMode: 'memory',\n  storageImpl: null,\n  storagePrefix: 'cachefactory.caches.',\n  storeOnReject: false,\n  storeOnResolve: false\n}\n","let _Promise = null\ntry {\n  _Promise = window.Promise\n} catch (e) {}\n\n/**\n * Utility methods used by CacheFactory.\n *\n * @example\n * import { utils } from 'cachefactory'\n * console.log(utils.isString('foo')) // true\n *\n * @namespace utils\n * @type {object}\n */\nconst utils = {\n  /**\n   * Returns whether the two values are strictly equal.\n   *\n   * @example\n   * import { utils } from 'cachefactory'\n   *\n   * console.log(utils.equals(4, 4) // true\n   * console.log(utils.equals(4, '4') // false\n   *\n   * @method utils.equals\n   * @param {*} a The first value.\n   * @param {*} a The second value.\n   * @returns {booleal} Whether the two values are strictly equal.\n   */\n  equals (a, b) {\n    return a === b\n  },\n\n  /**\n   * Proxy for `JSON.parse`.\n   *\n   * @example\n   * import { utils } from 'cachefactory'\n   *\n   * const a = utils.fromJson('{\"name\":\"John\"}')\n   * console.log(a) // { name: 'John' }\n   *\n   * @method utils.fromJson\n   * @param {string} json JSON to parse.\n   * @returns {object} The parsed object.\n   * @see utils.toJson\n   */\n  fromJson (value) {\n    return JSON.parse(value)\n  },\n\n  /**\n   * Returns whether the provided value is a function.\n   *\n   * @example\n   * import { utils } from 'cachefactory'\n   * const a = function (){ console.log('foo bar')}\n   * const b = { foo: \"bar\" }\n   * console.log(utils.isFunction(a)) // true\n   * console.log(utils.isFunction(b)) // false\n   *\n   * @method utils.isFunction\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a function.\n   */\n  isFunction (value) {\n    return typeof value === 'function'\n  },\n\n  /**\n   * Returns whether the provided value is a number.\n   *\n   * @example\n   * import { utils } from 'js-data'\n   * const a = 1\n   * const b = -1.25\n   * const c = '1'\n   * console.log(utils.isNumber(a)) // true\n   * console.log(utils.isNumber(b)) // true\n   * console.log(utils.isNumber(c)) // false\n   *\n   * @method utils.isNumber\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a number.\n   */\n  isNumber (value) {\n    return typeof value === 'number'\n  },\n\n  /**\n   * Returns whether the provided value is an object.\n   *\n   * @example\n   * import { utils } from 'cachefactory'\n   * const a = { foo: \"bar\" }\n   * const b = 'foo bar'\n   * console.log(utils.isObject(a)) // true\n   * console.log(utils.isObject(b)) // false\n   *\n   * @method utils.isObject\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an object.\n   */\n  isObject (value) {\n    return value !== null && typeof value === 'object'\n  },\n\n  isPromise (value) {\n    return value && utils.isFunction(value.then)\n  },\n\n  /**\n   * Returns whether the provided value is a string.\n   *\n   * @example\n   * import { utils } from 'cachefactory'\n   * console.log(utils.isString('')) // true\n   * console.log(utils.isString('my string')) // true\n   * console.log(utils.isString(100)) // false\n   * console.log(utils.isString([1,2,4])) // false\n   *\n   * @method utils.isString\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string.\n   */\n  isString (value) {\n    return typeof value === 'string'\n  },\n\n  /**\n   * Proxy for `JSON.stringify`.\n   *\n   * @example\n   * import { utils } from 'cachefactory'\n   *\n   * const a = { name: 'John' }\n   * console.log(utils.toJson(a)) // '{\"name\":\"John\"}'\n   *\n   * @method utils.toJson\n   * @param {*} value Value to serialize to JSON.\n   * @returns {string} JSON string.\n   * @see utils.fromJson\n   */\n  toJson (value) {\n    return JSON.stringify(value)\n  },\n\n  Promise: _Promise\n}\n\nexport default utils\n","import BinaryHeap from '../node_modules/yabh/src/index'\nimport defaults from './defaults'\nimport utils from './utils'\n\nconst assignMsg = `Cannot assign to read only property`\n\n/**\n * Provide a custom storage medium, e.g. a polyfill for `localStorage`. Default: `null`.\n *\n * Must implement:\n *\n * - `setItem` - Same API as `localStorage.setItem(key, value)`\n * - `getItem` - Same API as `localStorage.getItem(key)`\n * - `removeItem` - Same API as `localStorage.removeItem(key)`\n *\n * @name Cache~StorageImpl\n * @type {object}\n * @property {function} setItem Implementation of `setItem(key, value)`.\n * @property {function} getItem Implementation of `getItem(key)`.\n * @property {function} removeItem Implementation of `removeItem(key)`.\n */\n\n/**\n * Instances of this class represent a \"cache\"â€”a synchronous key-value store.\n * Each instance holds the settings for the cache, and provides methods for\n * manipulating the cache and its data.\n *\n * Generally you don't creates instances of `Cache` directly, but instead create\n * instances of `Cache` via {@link CacheFactory#createCache}.\n *\n * @example\n * import CacheFactory from 'cachefactory';\n *\n * const cacheFactory = new CacheFactory();\n * const options = {...};\n * const cache = cacheFactory.createCache('my-cache', options);\n *\n * cache.put('foo', 'bar');\n * console.log(cache.get('foo')); // \"bar\"\n *\n * @class Cache\n * @param {string} id A unique identifier for the cache.\n * @param {object} [options] Configuration options.\n * @param {number} [options.cacheFlushInterval=null] See {@link Cache#cacheFlushInterval}.\n * @param {number} [options.capacity=Number.MAX_VALUE] See {@link Cache#capacity}.\n * @param {string} [options.deleteOnExpire=\"none\"] See {@link Cache#deleteOnExpire}.\n * @param {boolean} [options.enabled=true] See {@link Cache#enabled}.\n * @param {number} [options.maxAge=Number.MAX_VALUE] See {@link Cache#maxAge}.\n * @param {function} [options.onExpire=null] See {@link Cache#onExpire}.\n * @param {number} [options.recycleFreq=1000] See {@link Cache#recycleFreq}.\n * @param {Cache~StorageImpl} [options.storageImpl=null] See {@link Cache~StorageImpl}.\n * @param {string} [options.storageMode=\"memory\"] See {@link Cache#storageMode}.\n * @param {string} [options.storagePrefix=\"cachefactory.caches.\"] See {@link Cache#storagePrefix}.\n * @param {boolean} [options.storeOnReject=false] See {@link Cache#storeOnReject}.\n * @param {boolean} [options.storeOnResolve=false] See {@link Cache#storeOnResolve}.\n */\nexport default class Cache {\n  constructor (id, options = {}) {\n    if (!utils.isString(id)) {\n      throw new TypeError(`\"id\" must be a string!`)\n    }\n\n    Object.defineProperties(this, {\n      // Writable\n      $$cacheFlushInterval: { writable: true, value: undefined },\n      $$cacheFlushIntervalId: { writable: true, value: undefined },\n      $$capacity: { writable: true, value: undefined },\n      $$data: { writable: true, value: {} },\n      $$deleteOnExpire: { writable: true, value: undefined },\n      $$enabled: { writable: true, value: undefined },\n      $$expiresHeap: { writable: true, value: new BinaryHeap((x) => x.accessed, utils.equals) },\n      $$initializing: { writable: true, value: true },\n      $$lruHeap: { writable: true, value: new BinaryHeap((x) => x.accessed, utils.equals) },\n      $$maxAge: { writable: true, value: undefined },\n      $$onExpire: { writable: true, value: undefined },\n      $$prefix: { writable: true, value: '' },\n      $$promises: { writable: true, value: {} },\n      $$recycleFreq: { writable: true, value: undefined },\n      $$recycleFreqId: { writable: true, value: undefined },\n      $$storage: { writable: true, value: undefined },\n      $$storageMode: { writable: true, value: undefined },\n      $$storagePrefix: { writable: true, value: undefined },\n      $$storeOnReject: { writable: true, value: undefined },\n      $$storeOnResolve: { writable: true, value: undefined },\n\n      // Read-only\n      $$parent: { value: options.parent },\n\n      /**\n       * The interval (in milliseconds) on which the cache should remove all of\n       * its items. Setting this to `null` disables the interval. The default is\n       * `null`.\n       *\n       * @example <caption>Create a cache the clears itself every 15 minutes</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   cacheFlushInterval: 15 * 60 * 1000\n       * });\n       *\n       * @name Cache#cacheFlushInterval\n       * @default null\n       * @public\n       * @readonly\n       * @type {number|null}\n       */\n      cacheFlushInterval: {\n        enumerable: true,\n        get: () => this.$$cacheFlushInterval,\n        set: () => { throw new Error(`${assignMsg} 'cacheFlushInterval'`) }\n      },\n\n      /**\n       * The maximum number of items that can be stored in the cache. When the\n       * capacity is exceeded the least recently accessed item will be removed.\n       * The default is `Number.MAX_VALUE`.\n       *\n       * @example <caption>Create a cache with a capacity of 100</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   capacity: 100\n       * });\n       *\n       * @name Cache#capacity\n       * @default Number.MAX_VALUE\n       * @public\n       * @readonly\n       * @type {number}\n       */\n      capacity: {\n        enumerable: true,\n        get: () => this.$$capacity,\n        set: () => { throw new Error(`${assignMsg} 'capacity'`) }\n      },\n\n      /**\n       * Determines the behavior of a cache when an item expires. The default is\n       * `\"none\"`.\n       *\n       * Possible values:\n       *\n       * - `\"none\"` - Cache will do nothing when an item expires.\n       * - `\"passive\"` - Cache will do nothing when an item expires. Expired\n       * items will remain in the cache until requested, at which point they are\n       * removed, and `undefined` is returned.\n       * - `\"aggressive\"` - Cache will remove expired items as soon as they are\n       * discovered.\n       *\n       * @example <caption>Create a cache that deletes items as soon as they expire</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   deleteOnExpire: 'aggressive'\n       * });\n       *\n       * @example <caption>Create a cache that doesn't delete expired items until they're accessed</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   deleteOnExpire: 'passive'\n       * });\n       *\n       * @name Cache#deleteOnExpire\n       * @default \"none\"\n       * @public\n       * @readonly\n       * @type {string}\n       */\n      deleteOnExpire: {\n        enumerable: true,\n        get: () => this.$$deleteOnExpire,\n        set: () => { throw new Error(`${assignMsg} 'deleteOnExpire'`) }\n      },\n\n      /**\n       * Marks whether the cache is enabled or not. For a disabled cache,\n       * {@link Cache#put} is a no-op. The default is `true`.\n       *\n       * @example <caption>Create a cache that starts out disabled</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   enabled: false\n       * });\n       *\n       * // The cache is disabled, this is a no-op\n       * cache.put('foo', 'bar');\n       * console.log(cache.get('foo')); // undefined\n       *\n       * @name Cache#enabled\n       * @default true\n       * @public\n       * @readonly\n       * @type {boolean}\n       */\n      enabled: {\n        enumerable: true,\n        get: () => this.$$enabled,\n        set: () => { throw new Error(`${assignMsg} 'enabled'`) }\n      },\n\n      /**\n       * Then unique identifier given to this cache when it was created.\n       *\n       * @name Cache#id\n       * @public\n       * @readonly\n       * @type {string}\n       */\n      id: {\n        enumerable: true,\n        value: id\n      },\n\n      /**\n       * Represents how long an item can be in the cache before expires. The\n       * cache's behavior toward expired items is determined by\n       * {@link Cache#deleteOnExpire}. The default value for `maxAge` is\n       * `Number.MAX_VALUE`.\n       *\n       * @example <caption>Create a cache where items expire after 15 minutes</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   // Items expire after 15 minutes\n       *   maxAge: 15 * 60 * 1000\n       * });\n       * const cache2 = cacheFactory.createCache('my-cache2', {\n       *   // Items expire after 15 minutes\n       *   maxAge: 15 * 60 * 1000,\n       *   // Expired items will only be deleted once they are accessed\n       *   deleteOnExpire: 'passive'\n       * });\n       * const cache3 = cacheFactory.createCache('my-cache3', {\n       *   // Items expire after 15 minutes\n       *   maxAge: 15 * 60 * 1000,\n       *   // Items will be deleted from the cache as soon as they expire\n       *   deleteOnExpire: 'aggressive'\n       * });\n       *\n       * @name Cache#maxAge\n       * @default Number.MAX_VALUE\n       * @public\n       * @readonly\n       * @type {number}\n       */\n      maxAge: {\n        enumerable: true,\n        get: () => this.$$maxAge,\n        set: () => { throw new Error(`${assignMsg} 'maxAge'`) }\n      },\n\n      /**\n       * The `onExpire` callback.\n       *\n       * @callback Cache~onExpireCallback\n       * @param {string} key The key of the expired item.\n       * @param {*} value The value of the expired item.\n       * @param {function} [done] If in `\"passive\"` mode and you pass an\n       * `onExpire` callback to {@link Cache#get}, then the `onExpire` callback\n       * you passed to {@link Cache#get} will be passed to your global\n       * `onExpire` callback.\n       */\n\n      /**\n       * A callback to be executed when expired items are removed from the\n       * cache when the cache is in `\"passive\"` or `\"aggressive\"` mode. The\n       * default is `null`. See {@link Cache~onExpireCallback} for the signature\n       * of the `onExpire` callback.\n       *\n       * @example <caption>Create a cache where items expire after 15 minutes</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   // Items expire after 15 minutes\n       *   maxAge: 15 * 60 * 1000,\n       *   // Expired items will only be deleted once they are accessed\n       *   deleteOnExpire: 'passive',\n       *   // Try to rehydrate cached items as they expire\n       *   onExpire: function (key, value, done) {\n       *     // Do something with key and value\n       *\n       *     // Will received \"done\" callback if in \"passive\" mode and passing\n       *     // an onExpire option to Cache#get.\n       *     if (done) {\n       *       done(); // You can pass whatever you want to done\n       *     }\n       *   }\n       * });\n       *\n       * @name Cache#onExpire\n       * @default null\n       * @public\n       * @readonly\n       * @see Cache~onExpireCallback\n       * @type {function}\n       */\n      onExpire: {\n        enumerable: true,\n        get: () => this.$$onExpire,\n        set: () => { throw new Error(`${assignMsg} 'onExpire'`) }\n      },\n\n      /**\n       * The frequency (in milliseconds) with which the cache should check for\n       * expired items. The default is `1000`. The value of this interval only\n       * matters if {@link Cache#deleteOnExpire} is set to `\"aggressive\"`.\n       *\n       * @example <caption>Create a cache where items expire after 15 minutes checking every 10 seconds</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   // Items expire after 15 minutes\n       *   maxAge: 15 * 60 * 1000,\n       *   // Items will be deleted from the cache as soon as they expire\n       *   deleteOnExpire: 'aggressive',\n       *   // Check for expired items every 10 seconds\n       *   recycleFreq: 10 * 1000\n       * });\n       *\n       * @name Cache#recycleFreq\n       * @default 1000\n       * @public\n       * @readonly\n       * @type {number|null}\n       */\n      recycleFreq: {\n        enumerable: true,\n        get: () => this.$$recycleFreq,\n        set: () => { throw new Error(`${assignMsg} 'recycleFreq'`) }\n      },\n\n      /**\n       * Determines the storage medium used by the cache. The default is\n       * `\"memory\"`.\n       *\n       * Possible values:\n       *\n       * - `\"memory\"`\n       * - `\"localStorage\"`\n       * - `\"sessionStorage\"`\n       *\n       * @example <caption>Create a cache that stores its data in localStorage</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   storageMode: 'localStorage'\n       * });\n       *\n       * @example <caption>Provide a custom storage implementation</caption>\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   storageMode: 'localStorage',\n       *   storageImpl: {\n       *     setItem: function (key, value) {\n       *       console.log('setItem', key, value);\n       *       localStorage.setItem(key, value);\n       *     },\n       *     getItem: function (key) {\n       *       console.log('getItem', key);\n       *       localStorage.getItem(key);\n       *     },\n       *     removeItem: function (key) {\n       *       console.log('removeItem', key);\n       *       localStorage.removeItem(key);\n       *     }\n       *   }\n       * });\n       *\n       * @name Cache#storageMode\n       * @default \"memory\"\n       * @public\n       * @readonly\n       * @type {string}\n       */\n      storageMode: {\n        enumerable: true,\n        get: () => this.$$storageMode,\n        set: () => { throw new Error(`${assignMsg} 'storageMode'`) }\n      },\n\n      /**\n       * The prefix used to namespace the keys for items stored in\n       * `localStorage` or `sessionStorage`. The default is\n       * `\"cachefactory.caches.\"` which is conservatively long in order any\n       * possible conflict with other data in storage. Set to a shorter value\n       * to save storage space.\n       *\n       * @example\n       * import CacheFactory from 'cachefactory';\n       *\n       * const cacheFactory = new CacheFactory();\n       * const cache = cacheFactory.createCache('my-cache', {\n       *   storageMode: 'localStorage',\n       *   // Completely remove the prefix to save the most space\n       *   storagePrefix: ''\n       * });\n       * cache.put('foo', 'bar');\n       * console.log(localStorage.get('my-cache.data.foo')); // \"bar\"\n       *\n       * @name Cache#storagePrefix\n       * @default \"cachefactory.caches.\"\n       * @public\n       * @readonly\n       * @type {string}\n       */\n      storagePrefix: {\n        enumerable: true,\n        get: () => this.$$storagePrefix,\n        set: () => { throw new Error(`${assignMsg} 'storagePrefix'`) }\n      },\n\n      /**\n       * If set to `true`, when a promise is inserted into the cache and is then\n       * rejected, then the rejection value will overwrite the promise in the\n       * cache. The default is `false`.\n       *\n       * @name Cache#storeOnReject\n       * @default false\n       * @public\n       * @readonly\n       * @type {boolean}\n       */\n      storeOnReject: {\n        enumerable: true,\n        get: () => this.$$storeOnReject,\n        set: () => { throw new Error(`${assignMsg} 'storeOnReject'`) }\n      },\n\n      /**\n       * If set to `true`, when a promise is inserted into the cache and is then\n       * resolved, then the resolution value will overwrite the promise in the\n       * cache. The default is `false`.\n       *\n       * @name Cache#storeOnResolve\n       * @default false\n       * @public\n       * @readonly\n       * @type {boolean}\n       */\n      storeOnResolve: {\n        enumerable: true,\n        get: () => this.$$storeOnResolve,\n        set: () => { throw new Error(`${assignMsg} 'storeOnResolve'`) }\n      }\n    })\n\n    this.setOptions(options, true)\n    this.$$initializing = false\n  }\n\n  /**\n   * Destroys this cache and all its data and renders it unusable.\n   *\n   * @example\n   * cache.destroy();\n   *\n   * @method Cache#destroy\n   */\n  destroy () {\n    clearInterval(this.$$cacheFlushIntervalId)\n    clearInterval(this.$$recycleFreqId)\n    this.removeAll()\n    if (this.$$storage) {\n      this.$$storage().removeItem(`${this.$$prefix}.keys`)\n      this.$$storage().removeItem(this.$$prefix)\n    }\n    this.$$storage = null\n    this.$$data = null\n    this.$$lruHeap = null\n    this.$$expiresHeap = null\n    this.$$prefix = null\n    if (this.$$parent) {\n      this.$$parent.caches[this.id] = undefined\n    }\n  }\n\n  /**\n   * Disables this cache. For a disabled cache, {@link Cache#put} is a no-op.\n   *\n   * @example\n   * cache.disable();\n   *\n   * @method Cache#disable\n   */\n  disable () {\n    this.$$enabled = false\n  }\n\n  /**\n   * Enables this cache. For a disabled cache, {@link Cache#put} is a no-op.\n   *\n   * @example\n   * cache.enable();\n   *\n   * @method Cache#enable\n   */\n  enable () {\n    this.$$enabled = true\n  }\n\n  /**\n   * Retrieve an item from the cache, it it exists.\n   *\n   * @example <caption>Retrieve an item from the cache</caption>\n   * cache.put('foo', 'bar');\n   * cache.get('foo'); // \"bar\"\n   *\n   * @example <caption>Retrieve a possibly expired item while in passive mode</caption>\n   * import CacheFactory from 'cachefactory';\n   *\n   * const cacheFactory = new CacheFactory();\n   * const cache = cacheFactory.createCache('my-cache', {\n   *   deleteOnExpire: 'passive',\n   *   maxAge: 15 * 60 * 1000\n   * });\n   * cache.get('foo', {\n   *   // Called if \"foo\" is expired\n   *   onExpire: function (key, value) {\n   *     // Do something with key and value\n   *   }\n   * });\n   *\n   * @example <caption>Retrieve a possibly expired item while in passive mode with global onExpire callback</caption>\n   * import CacheFactory from 'cachefactory';\n   *\n   * const cacheFactory = new CacheFactory();\n   * const cache = cacheFactory.createCache('my-cache', {\n   *   deleteOnExpire: 'passive',\n   *   maxAge: 15 * 60 * 1000\n   *   onExpire: function (key, value, done) {\n   *     console.log('Expired item:', key);\n   *     if (done) {\n   *       done('foo', key, value);\n   *     }\n   *   }\n   * });\n   * cache.get('foo', {\n   *   // Called if \"foo\" is expired\n   *   onExpire: function (msg, key, value) {\n   *     console.log(msg); // \"foo\"\n   *     // Do something with key and value\n   *   }\n   * });\n   *\n   * @method Cache#get\n   * @param {string|string[]} key The key of the item to retrieve.\n   * @param {object} [options] Configuration options.\n   * @param {function} [options.onExpire] TODO\n   * @returns {*} The value for the specified `key`, if any.\n   */\n  get (key, options = {}) {\n    if (Array.isArray(key)) {\n      const keys = key\n      const values = []\n\n      keys.forEach((key) => {\n        const value = this.get(key, options)\n        if (value !== null && value !== undefined) {\n          values.push(value)\n        }\n      })\n\n      return values\n    } else {\n      if (utils.isNumber(key)) {\n        key = '' + key\n      }\n\n      if (!this.enabled) {\n        return\n      }\n    }\n\n    if (!utils.isString(key)) {\n      throw new TypeError(`\"key\" must be a string!`)\n    } else if (!options || !utils.isObject(options)) {\n      throw new TypeError(`\"options\" must be an object!`)\n    } else if (options.onExpire && !utils.isFunction(options.onExpire)) {\n      throw new TypeError(`\"options.onExpire\" must be a function!`)\n    }\n\n    let item\n\n    if (this.$$storage) {\n      if (this.$$promises[key]) {\n        return this.$$promises[key]\n      }\n\n      const itemJson = this.$$storage().getItem(`${this.$$prefix}.data.${key}`)\n\n      if (itemJson) {\n        item = utils.fromJson(itemJson)\n      }\n    } else if (utils.isObject(this.$$data)) {\n      item = this.$$data[key]\n    }\n\n    if (!item) {\n      return\n    }\n\n    let value = item.value\n    let now = new Date().getTime()\n\n    if (this.$$storage) {\n      this.$$lruHeap.remove({\n        key: key,\n        accessed: item.accessed\n      })\n      item.accessed = now\n      this.$$lruHeap.push({\n        key: key,\n        accessed: now\n      })\n    } else {\n      this.$$lruHeap.remove(item)\n      item.accessed = now\n      this.$$lruHeap.push(item)\n    }\n\n    if (this.$$deleteOnExpire === 'passive' && 'expires' in item && item.expires < now) {\n      this.remove(key)\n\n      if (this.$$onExpire) {\n        this.$$onExpire(key, item.value, options.onExpire)\n      } else if (options.onExpire) {\n        options.onExpire.call(this, key, item.value)\n      }\n      value = undefined\n    } else if (this.$$storage) {\n      this.$$storage().setItem(`${this.$$prefix}.data.${key}`, utils.toJson(item))\n    }\n\n    return value\n  }\n\n  /**\n   * Retrieve information about the whole cache or about a particular item in\n   * the cache.\n   *\n   * @example <caption>Retrieve info about the cache</caption>\n   * const info = cache.info();\n   * info.id; // \"my-cache\"\n   * info.capacity; // 100\n   * info.maxAge; // 600000\n   * info.deleteOnExpire; // \"aggressive\"\n   * info.cacheFlushInterval; // null\n   * info.recycleFreq; // 10000\n   * info.storageMode; // \"localStorage\"\n   * info.enabled; // false\n   * info.size; // 1234\n   *\n   * @example <caption>Retrieve info about an item in the cache</caption>\n   * const info = cache.info('foo');\n   * info.created; // 1234567890\n   * info.accessed; // 1234567990\n   * info.expires; // 1234569999\n   * info.isExpired; // false\n   *\n   * @method Cache#info\n   * @param {string} [key] If specified, retrieve info for a particular item in\n   * the cache.\n   * @returns {*} The information object.\n   */\n  info (key) {\n    if (key) {\n      let item\n      if (this.$$storage) {\n        const itemJson = this.$$storage().getItem(`${this.$$prefix}.data.${key}`)\n        if (itemJson) {\n          item = utils.fromJson(itemJson)\n        }\n      } else if (utils.isObject(this.$$data)) {\n        item = this.$$data[key]\n      }\n      if (item) {\n        return {\n          created: item.created,\n          accessed: item.accessed,\n          expires: item.expires,\n          isExpired: (new Date().getTime() - item.created) > (item.maxAge || this.$$maxAge)\n        }\n      }\n    } else {\n      return {\n        id: this.id,\n        capacity: this.capacity,\n        maxAge: this.maxAge,\n        deleteOnExpire: this.deleteOnExpire,\n        onExpire: this.onExpire,\n        cacheFlushInterval: this.cacheFlushInterval,\n        recycleFreq: this.recycleFreq,\n        storageMode: this.storageMode,\n        storageImpl: this.$$storage ? this.$$storage() : undefined,\n        enabled: this.enabled,\n        size: this.$$lruHeap && this.$$lruHeap.size() || 0\n      }\n    }\n  }\n\n  /**\n   * Retrieve a list of the keys of items currently in the cache.\n   *\n   * @example\n   * const keys = cache.keys();\n   *\n   * @method Cache#keys\n   * @returns {string[]} The keys of the items in the cache\n   */\n  keys () {\n    if (this.$$storage) {\n      const keysJson = this.$$storage().getItem(`${this.$$prefix}.keys`)\n\n      if (keysJson) {\n        return utils.fromJson(keysJson)\n      } else {\n        return []\n      }\n    } else {\n      return Object.keys(this.$$data).filter((key) => this.$$data[key])\n    }\n  }\n\n  /**\n   * Retrieve an object of the keys of items currently in the cache.\n   *\n   * @example\n   * const keySet = cache.keySet();\n   *\n   * @method Cache#keySet\n   * @returns {object} The keys of the items in the cache.\n   */\n  keySet () {\n    const set = {}\n    this.keys().forEach((key) => {\n      set[key] = key\n    })\n    return set\n  }\n\n  /**\n   * Insert an item into the cache.\n   *\n   * @example\n   * const inserted = cache.put('foo', 'bar');\n   *\n   * @method Cache#put\n   * @param {string} key The key under which to insert the item.\n   * @param {*} value The value to insert.\n   * @param {object} [options] Configuration options.\n   * @param {boolean} [options.storeOnReject] See {@link Cache#storeOnReject}.\n   * @param {boolean} [options.storeOnResolve] See {@link Cache#storeOnResolve}.\n   * @returns {*} The inserted value.\n   */\n  put (key, value, options = {}) {\n    const storeOnResolve = options.storeOnResolve !== undefined ? !!options.storeOnResolve : this.$$storeOnResolve\n    const storeOnReject = options.storeOnReject !== undefined ? !!options.storeOnReject : this.$$storeOnReject\n\n    const getHandler = (shouldStore, isError) => {\n      return (v) => {\n        if (shouldStore) {\n          this.$$promises[key] = undefined\n          if (utils.isObject(v) && 'status' in v && 'data' in v) {\n            v = [v.status, v.data, v.headers(), v.statusText]\n            this.put(key, v)\n          } else {\n            this.put(key, v)\n          }\n        }\n        if (isError) {\n          if (utils.Promise) {\n            return utils.Promise.reject(v)\n          } else {\n            throw v\n          }\n        } else {\n          return v\n        }\n      }\n    }\n\n    if (!this.$$enabled || !utils.isObject(this.$$data) || value === null || value === undefined) {\n      return\n    }\n    if (utils.isNumber(key)) {\n      key = '' + key\n    }\n\n    if (!utils.isString(key)) {\n      throw new TypeError(`\"key\" must be a string!`)\n    }\n\n    const now = new Date().getTime()\n    const item = {\n      key: key,\n      value: utils.isPromise(value) ? value.then(getHandler(storeOnResolve, false), getHandler(storeOnReject, true)) : value,\n      created: options.created === undefined ? now : options.created,\n      accessed: options.accessed === undefined ? now : options.accessed\n    }\n    if (utils.isNumber(options.maxAge)) {\n      item.maxAge = options.maxAge\n    }\n\n    if (options.expires === undefined) {\n      item.expires = item.created + (item.maxAge || this.$$maxAge)\n    } else {\n      item.expires = options.expires\n    }\n\n    if (this.$$storage) {\n      if (utils.isPromise(item.value)) {\n        this.$$promises[key] = item.value\n        return this.$$promises[key]\n      }\n      const keysJson = this.$$storage().getItem(`${this.$$prefix}.keys`)\n      const keys = keysJson ? utils.fromJson(keysJson) : []\n      const itemJson = this.$$storage().getItem(`${this.$$prefix}.data.${key}`)\n\n      // Remove existing\n      if (itemJson) {\n        this.remove(key)\n      }\n      // Add to expires heap\n      this.$$expiresHeap.push({\n        key: key,\n        expires: item.expires\n      })\n      // Add to lru heap\n      this.$$lruHeap.push({\n        key: key,\n        accessed: item.accessed\n      })\n      // Set item\n      this.$$storage().setItem(`${this.$$prefix}.data.${key}`, utils.toJson(item))\n      let exists = false\n      keys.forEach((_key) => {\n        if (_key === key) {\n          exists = true\n          return false\n        }\n      })\n      if (!exists) {\n        keys.push(key)\n      }\n      this.$$storage().setItem(`${this.$$prefix}.keys`, utils.toJson(keys))\n    } else {\n      // Remove existing\n      if (this.$$data[key]) {\n        this.remove(key)\n      }\n      // Add to expires heap\n      this.$$expiresHeap.push(item)\n      // Add to lru heap\n      this.$$lruHeap.push(item)\n      // Set item\n      this.$$data[key] = item\n      this.$$promises[key] = undefined\n    }\n\n    // Handle exceeded capacity\n    if (this.$$lruHeap.size() > this.$$capacity) {\n      this.remove(this.$$lruHeap.peek().key)\n    }\n\n    return value\n  }\n\n  /**\n   * Remove an item from the cache.\n   *\n   * @example\n   * const removed = cache.remove('foo');\n   *\n   * @method Cache#remove\n   * @param {string} key The key of the item to remove.\n   * @returns {*} The value of the removed item, if any.\n   */\n  remove (key) {\n    if (utils.isNumber(key)) {\n      key = '' + key\n    }\n    this.$$promises[key] = undefined\n    if (this.$$storage) {\n      const itemJson = this.$$storage().getItem(`${this.$$prefix}.data.${key}`)\n\n      if (itemJson) {\n        let item = utils.fromJson(itemJson)\n        this.$$lruHeap.remove({\n          key: key,\n          accessed: item.accessed\n        })\n        this.$$expiresHeap.remove({\n          key: key,\n          expires: item.expires\n        })\n        this.$$storage().removeItem(`${this.$$prefix}.data.${key}`)\n        let keysJson = this.$$storage().getItem(`${this.$$prefix}.keys`)\n        let keys = keysJson ? utils.fromJson(keysJson) : []\n        let index = keys.indexOf(key)\n\n        if (index >= 0) {\n          keys.splice(index, 1)\n        }\n        this.$$storage().setItem(`${this.$$prefix}.keys`, utils.toJson(keys))\n        return item.value\n      }\n    } else if (utils.isObject(this.$$data)) {\n      let value = this.$$data[key] ? this.$$data[key].value : undefined\n      this.$$lruHeap.remove(this.$$data[key])\n      this.$$expiresHeap.remove(this.$$data[key])\n      this.$$data[key] = undefined\n      return value\n    }\n  }\n\n  /**\n   * Remove all items from the cache.\n   *\n   * @example\n   * cache.removeAll();\n   *\n   * @method Cache#removeAll\n   */\n  removeAll () {\n    const storage = this.$$storage\n    const keys = this.keys()\n    this.$$lruHeap.removeAll()\n    this.$$expiresHeap.removeAll()\n\n    if (storage) {\n      storage().setItem(`${this.$$prefix}.keys`, utils.toJson([]))\n      keys.forEach((key) => {\n        storage().removeItem(`${this.$$prefix}.data.${key}`)\n      })\n    } else if (utils.isObject(this.$$data)) {\n      this.$$data = {}\n    }\n    this.$$promises = {}\n  }\n\n  /**\n   * Remove expired items from the cache, if any.\n   *\n   * @example\n   * const expiredItems = cache.removeExpired();\n   *\n   * @method Cache#removeExpired\n   * @returns {object} The expired items, if any.\n   */\n  removeExpired () {\n    const now = new Date().getTime()\n    const expired = {}\n    let expiredItem\n\n    while ((expiredItem = this.$$expiresHeap.peek()) && expiredItem.expires <= now) {\n      expired[expiredItem.key] = expiredItem.value ? expiredItem.value : null\n      this.$$expiresHeap.pop()\n    }\n\n    Object.keys(expired).forEach((key) => {\n      this.remove(key)\n    })\n\n    if (this.$$onExpire) {\n      Object.keys(expired).forEach((key) => {\n        this.$$onExpire(key, expired[key])\n      })\n    }\n\n    return expired\n  }\n\n  /**\n   * Update the {@link Cache#cacheFlushInterval} for the cache. Pass in `null`\n   * to disable the interval.\n   *\n   * @example\n   * cache.setCacheFlushInterval(60 * 60 * 1000);\n   *\n   * @method Cache#setCacheFlushInterval\n   * @param {number|null} cacheFlushInterval The new {@link Cache#cacheFlushInterval}.\n   */\n  setCacheFlushInterval (cacheFlushInterval) {\n    if (cacheFlushInterval === null) {\n      this.$$cacheFlushInterval = null\n    } else if (!utils.isNumber(cacheFlushInterval)) {\n      throw new TypeError(`\"cacheFlushInterval\" must be a number!`)\n    } else if (cacheFlushInterval <= 0) {\n      throw new Error(`\"cacheFlushInterval\" must be greater than zero!`)\n    }\n    this.$$cacheFlushInterval = cacheFlushInterval\n    clearInterval(this.$$cacheFlushIntervalId)\n    this.$$cacheFlushIntervalId = undefined\n    if (this.$$cacheFlushInterval) {\n      this.$$cacheFlushIntervalId = setInterval(() => this.removeAll(), this.$$cacheFlushInterval)\n    }\n  }\n\n  /**\n   * Update the {@link Cache#capacity} for the cache. Pass in `null` to reset\n   * to `Number.MAX_VALUE`.\n   *\n   * @example\n   * cache.setCapacity(1000);\n   *\n   * @method Cache#setCapacity\n   * @param {number|null} capacity The new {@link Cache#capacity}.\n   */\n  setCapacity (capacity) {\n    if (capacity === null) {\n      this.$$capacity = Number.MAX_VALUE\n    } else if (!utils.isNumber(capacity)) {\n      throw new TypeError(`\"capacity\" must be a number!`)\n    } else if (capacity <= 0) {\n      throw new Error(`\"capacity\" must be greater than zero!`)\n    } else {\n      this.$$capacity = capacity\n    }\n    const removed = {}\n    while (this.$$lruHeap.size() > this.$$capacity) {\n      removed[this.$$lruHeap.peek().key] = this.remove(this.$$lruHeap.peek().key)\n    }\n    return removed\n  }\n\n  /**\n   * Update the {@link Cache#deleteOnExpire} for the cache. Pass in `null` to\n   * reset to `\"none\"`.\n   *\n   * @example\n   * cache.setDeleteOnExpire('passive');\n   *\n   * @method Cache#setDeleteOnExpire\n   * @param {string|null} deleteOnExpire The new {@link Cache#deleteOnExpire}.\n   */\n  setDeleteOnExpire (deleteOnExpire, setRecycleFreq) {\n    if (deleteOnExpire === null) {\n      deleteOnExpire = 'none'\n    } else if (!utils.isString(deleteOnExpire)) {\n      throw new TypeError(`\"deleteOnExpire\" must be a string!`)\n    } else if (deleteOnExpire !== 'none' && deleteOnExpire !== 'passive' && deleteOnExpire !== 'aggressive') {\n      throw new Error(`\"deleteOnExpire\" must be \"none\", \"passive\" or \"aggressive\"!`)\n    }\n    this.$$deleteOnExpire = deleteOnExpire\n    if (setRecycleFreq !== false) {\n      this.setRecycleFreq(this.$$recycleFreq)\n    }\n  }\n\n  /**\n   * Update the {@link Cache#maxAge} for the cache. Pass in `null` to reset to\n   * to `Number.MAX_VALUE`.\n   *\n   * @example\n   * cache.setMaxAge(60 * 60 * 1000);\n   *\n   * @method Cache#setMaxAge\n   * @param {number|null} maxAge The new {@link Cache#maxAge}.\n   */\n  setMaxAge (maxAge) {\n    if (maxAge === null) {\n      this.$$maxAge = Number.MAX_VALUE\n    } else if (!utils.isNumber(maxAge)) {\n      throw new TypeError(`\"maxAge\" must be a number!`)\n    } else if (maxAge <= 0) {\n      throw new Error(`\"maxAge\" must be greater than zero!`)\n    } else {\n      this.$$maxAge = maxAge\n    }\n    const keys = this.keys()\n\n    this.$$expiresHeap.removeAll()\n\n    if (this.$$storage) {\n      keys.forEach((key) => {\n        const itemJson = this.$$storage().getItem(`${this.$$prefix}.data.${key}`)\n        if (itemJson) {\n          const item = utils.fromJson(itemJson)\n          if (this.$$maxAge === Number.MAX_VALUE) {\n            item.expires = Number.MAX_VALUE\n          } else {\n            item.expires = item.created + (item.maxAge || this.$$maxAge)\n          }\n          this.$$expiresHeap.push({\n            key: key,\n            expires: item.expires\n          })\n        }\n      })\n    } else {\n      keys.forEach((key) => {\n        const item = this.$$data[key]\n        if (item) {\n          if (this.$$maxAge === Number.MAX_VALUE) {\n            item.expires = Number.MAX_VALUE\n          } else {\n            item.expires = item.created + (item.maxAge || this.$$maxAge)\n          }\n          this.$$expiresHeap.push(item)\n        }\n      })\n    }\n\n    if (this.$$deleteOnExpire === 'aggressive') {\n      return this.removeExpired()\n    } else {\n      return {}\n    }\n  }\n\n  /**\n   * Update the {@link Cache#onExpire} for the cache. Pass in `null` to unset\n   * the global `onExpire` callback of the cache.\n   *\n   * @example\n   * cache.setOnExpire(function (key, value, done) {\n   *   // Do something\n   * });\n   *\n   * @method Cache#setOnExpire\n   * @param {function|null} onExpire The new {@link Cache#onExpire}.\n   */\n  setOnExpire (onExpire) {\n    if (onExpire === null) {\n      this.$$onExpire = null\n    } else if (!utils.isFunction(onExpire)) {\n      throw new TypeError(`\"onExpire\" must be a function!`)\n    } else {\n      this.$$onExpire = onExpire\n    }\n  }\n\n  /**\n   * Update multiple cache options at a time.\n   *\n   * @example\n   * cache.setOptions({\n   *   maxAge: 60 * 60 * 1000,\n   *   deleteOnExpire: 'aggressive'\n   * });\n   *\n   * @example <caption>Set two options, and reset the rest to the configured defaults</caption>\n   * cache.setOptions({\n   *   maxAge: 60 * 60 * 1000,\n   *   deleteOnExpire: 'aggressive'\n   * }, true);\n   *\n   * @method Cache#setOptions\n   * @param {object} options The options to set.\n   * @param {boolean} [strict] Reset options not passed to `options` to the\n   * configured defaults.\n   */\n  setOptions (options = {}, strict = false) {\n    if (!utils.isObject(options)) {\n      throw new TypeError(`\"options\" must be an object!`)\n    }\n\n    if (options.storagePrefix !== undefined) {\n      this.$$storagePrefix = options.storagePrefix\n    } else if (strict) {\n      this.$$storagePrefix = defaults.storagePrefix\n    }\n\n    this.$$prefix = this.$$storagePrefix + this.id\n\n    if (options.enabled !== undefined) {\n      this.$$enabled = !!options.enabled\n    } else if (strict) {\n      this.$$enabled = defaults.enabled\n    }\n\n    if (options.deleteOnExpire !== undefined) {\n      this.setDeleteOnExpire(options.deleteOnExpire, false)\n    } else if (strict) {\n      this.setDeleteOnExpire(defaults.deleteOnExpire, false)\n    }\n\n    if (options.recycleFreq !== undefined) {\n      this.setRecycleFreq(options.recycleFreq)\n    } else if (strict) {\n      this.setRecycleFreq(defaults.recycleFreq)\n    }\n\n    if (options.maxAge !== undefined) {\n      this.setMaxAge(options.maxAge)\n    } else if (strict) {\n      this.setMaxAge(defaults.maxAge)\n    }\n\n    if (options.storeOnResolve !== undefined) {\n      this.$$storeOnResolve = !!options.storeOnResolve\n    } else if (strict) {\n      this.$$storeOnResolve = defaults.storeOnResolve\n    }\n\n    if (options.storeOnReject !== undefined) {\n      this.$$storeOnReject = !!options.storeOnReject\n    } else if (strict) {\n      this.$$storeOnReject = defaults.storeOnReject\n    }\n\n    if (options.capacity !== undefined) {\n      this.setCapacity(options.capacity)\n    } else if (strict) {\n      this.setCapacity(defaults.capacity)\n    }\n\n    if (options.cacheFlushInterval !== undefined) {\n      this.setCacheFlushInterval(options.cacheFlushInterval)\n    } else if (strict) {\n      this.setCacheFlushInterval(defaults.cacheFlushInterval)\n    }\n\n    if (options.onExpire !== undefined) {\n      this.setOnExpire(options.onExpire)\n    } else if (strict) {\n      this.setOnExpire(defaults.onExpire)\n    }\n\n    if (options.storageMode !== undefined || options.storageImpl !== undefined) {\n      this.setStorageMode(options.storageMode || defaults.storageMode, options.storageImpl || defaults.storageImpl)\n    } else if (strict) {\n      this.setStorageMode(defaults.storageMode, defaults.storageImpl)\n    }\n  }\n\n  /**\n   * Update the {@link Cache#recycleFreq} for the cache. Pass in `null` to\n   * disable the interval.\n   *\n   * @example\n   * cache.setRecycleFreq(10000);\n   *\n   * @method Cache#setRecycleFreq\n   * @param {number|null} recycleFreq The new {@link Cache#recycleFreq}.\n   */\n  setRecycleFreq (recycleFreq) {\n    if (recycleFreq === null) {\n      this.$$recycleFreq = null\n    } else if (!utils.isNumber(recycleFreq)) {\n      throw new TypeError(`\"recycleFreq\" must be a number!`)\n    } else if (recycleFreq <= 0) {\n      throw new Error(`\"recycleFreq\" must be greater than zero!`)\n    } else {\n      this.$$recycleFreq = recycleFreq\n    }\n    clearInterval(this.$$recycleFreqId)\n    if (this.$$deleteOnExpire === 'aggressive' && this.$$recycleFreq) {\n      this.$$recycleFreqId = setInterval(() => this.removeExpired(), this.$$recycleFreq)\n    } else {\n      this.$$recycleFreqId = undefined\n    }\n  }\n\n  /**\n   * Update the {@link Cache#storageMode} for the cache.\n   *\n   * @method Cache#setStorageMode\n   * @param {string} storageMode The new {@link Cache#storageMode}.\n   * @param {object} storageImpl The new {@link Cache~StorageImpl}.\n   */\n  setStorageMode (storageMode, storageImpl) {\n    if (!utils.isString(storageMode)) {\n      throw new TypeError(`\"storageMode\" must be a string!`)\n    } else if (storageMode !== 'memory' && storageMode !== 'localStorage' && storageMode !== 'sessionStorage') {\n      throw new Error(`\"storageMode\" must be \"memory\", \"localStorage\", or \"sessionStorage\"!`)\n    }\n\n    const prevStorage = this.$$storage\n    const prevData = this.$$data\n    let shouldReInsert = false\n    let items = {}\n\n    const load = (prevStorage, prevData) => {\n      const keys = this.keys()\n      const prevDataIsObject = utils.isObject(prevData)\n      keys.forEach((key) => {\n        if (prevStorage) {\n          const itemJson = prevStorage().getItem(`${this.$$prefix}.data.${key}`)\n          if (itemJson) {\n            items[key] = utils.fromJson(itemJson)\n          }\n        } else if (prevDataIsObject) {\n          items[key] = prevData[key]\n        }\n        this.remove(key)\n        shouldReInsert || (shouldReInsert = true)\n      })\n    }\n\n    if (!this.$$initializing) {\n      load(prevStorage, prevData)\n    }\n\n    this.$$storageMode = storageMode\n\n    if (storageImpl) {\n      if (!utils.isObject(storageImpl)) {\n        throw new TypeError(`\"storageImpl\" must be an object!`)\n      } else if (typeof storageImpl.setItem !== 'function') {\n        throw new Error(`\"storageImpl\" must implement \"setItem(key, value)\"!`)\n      } else if (typeof storageImpl.getItem !== 'function') {\n        throw new Error(`\"storageImpl\" must implement \"getItem(key)\"!`)\n      } else if (typeof storageImpl.removeItem !== 'function') {\n        throw new Error(`\"storageImpl\" must implement \"removeItem(key)\"!`)\n      }\n      this.$$storage = () => storageImpl\n    } else if (this.$$storageMode === 'localStorage') {\n      try {\n        localStorage.setItem('cachefactory', 'cachefactory')\n        localStorage.removeItem('cachefactory')\n        this.$$storage = () => localStorage\n      } catch (e) {\n        this.$$storage = null\n        this.$$storageMode = 'memory'\n      }\n    } else if (this.$$storageMode === 'sessionStorage') {\n      try {\n        sessionStorage.setItem('cachefactory', 'cachefactory')\n        sessionStorage.removeItem('cachefactory')\n        this.$$storage = () => sessionStorage\n      } catch (e) {\n        this.$$storage = null\n        this.$$storageMode = 'memory'\n      }\n    } else {\n      this.$$storage = null\n      this.$$storageMode = 'memory'\n    }\n\n    if (this.$$initializing) {\n      load(this.$$storage, this.$$data)\n    }\n\n    if (shouldReInsert) {\n      Object.keys(items).forEach((key) => {\n        const item = items[key]\n        this.put(key, item.value, {\n          created: item.created,\n          accessed: item.accessed,\n          expires: item.expires\n        })\n      })\n    }\n  }\n\n  /**\n   * Reset an item's age in the cache, or if `key` is unspecified, touch all\n   * items in the cache.\n   *\n   * @example\n   * cache.touch('foo');\n   *\n   * @method Cache#touch\n   * @param {string} [key] The key of the item to touch.\n   * @param {object} [options] Options to pass to {@link Cache#put} if\n   * necessary.\n   */\n  touch (key, options) {\n    if (key) {\n      const val = this.get(key, {\n        onExpire: (k, v) => this.put(k, v)\n      })\n      if (val) {\n        this.put(key, val, options)\n      }\n    } else {\n      const keys = this.keys()\n      for (var i = 0; i < keys.length; i++) {\n        this.touch(keys[i], options)\n      }\n    }\n  }\n\n  /**\n   * Retrieve the values of all items in the cache.\n   *\n   * @example\n   * const values = cache.values();\n   *\n   * @method Cache#values\n   * @returns {array} The values of the items in the cache.\n   */\n  values () {\n    return this.keys().map((key) => this.get(key))\n  }\n}\n","/**\n * A instance of `CacheFactory` holds multiple caches, and provides methods for\n * manipulating all of the caches at once.\n *\n * @example\n * import CacheFactory from 'cachefactory';\n *\n * const cacheFactory = new CacheFactory();\n * const cache = cacheFactory.createCache('my-cache');\n *\n * @class CacheFactory\n */\nexport default class CacheFactory {\n  constructor () {\n    Object.defineProperty(this, 'caches', {\n      writable: true,\n      value: {}\n    })\n  }\n\n  /**\n   * Calls {@link Cache#removeAll} on each {@link Cache} in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * cacheFactory.clearAll();\n   *\n   * @method CacheFactory#clearAll\n   */\n  clearAll () {\n    this.keys().forEach((cacheId) => {\n      this.get(cacheId).removeAll()\n    })\n  }\n\n  /**\n   * Create a new {@link Cache}. If a cache with the same `id` had been created\n   * in a previous browser session, then it will attempt to load any data that\n   * had been saved previously.\n   *\n   * @example\n   * import CacheFactory from 'cachefactory';\n   *\n   * const cacheFactory = new CacheFactory();\n   * const options = {...};\n   * const cache = cacheFactory.createCache('my-cache', options);\n   *\n   * cache.put('foo', 'bar');\n   * console.log(cache.get('foo')); // \"bar\"\n   *\n   * @method CacheFactory#createCache\n   * @param {string} id A unique identifier for the new {@link Cache}.\n   * @param {object} [options] Configuration options. See {@link Cache}.\n   * @returns {Cache} The new {@link Cache} instance.\n   */\n  createCache (id, options = {}) {\n    if (this.caches[id]) {\n      throw new Error(`cache \"${id}\" already exists!`)\n    }\n    options.parent = this\n    this.caches[id] = new CacheFactory.Cache(id, options)\n    return this.caches[id]\n  }\n\n  /**\n   * Calls {@link Cache#destroy} on the {@link Cache} in this\n   * {@link CacheFactory} that has the specified `id`.\n   *\n   * @example\n   * cacheFactory.destroy('my-cache');\n   *\n   * @method CacheFactory#destroy\n   * @param {string} id TODO\n   */\n  destroy (id) {\n    this.get(id).destroy()\n    this.caches[id] = undefined\n  }\n\n  /**\n   * Calls {@link Cache#destroy} on each {@link Cache} in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * cacheFactory.destroyAll();\n   *\n   * @method CacheFactory#destroyAll\n   */\n  destroyAll () {\n    this.keys().forEach((id) => {\n      this.get(id).destroy()\n    })\n    this.caches = {}\n  }\n\n  /**\n   * Calls {@link Cache#disable} on each {@link Cache} in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * cacheFactory.disableAll();\n   *\n   * @method CacheFactory#disableAll\n   */\n  disableAll () {\n    this.keys().forEach((cacheId) => {\n      this.get(cacheId).disable()\n    })\n  }\n\n  /**\n   * Calls {@link Cache#enable} on each {@link Cache} in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * cacheFactory.enableAll();\n   *\n   * @method CacheFactory#enableAll\n   */\n  enableAll () {\n    this.keys().forEach((cacheId) => {\n      this.get(cacheId).enable()\n    })\n  }\n\n  /**\n   * Returns whether the {@link Cache} with the specified `id` exists in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * const exists = cacheFactory.exists('my-cache');\n   *\n   * @method CacheFactory#exists\n   * @returns {boolean} Whether the {@link Cache} with the specified `id` exists\n   * in this {@link CacheFactory}.\n   */\n  exists (id) {\n    return !!this.caches[id]\n  }\n\n  /**\n   * Returns a reference to the {@link Cache} in this {@link CacheFactory} that\n   * has the specified `id`.\n   *\n   * @example\n   * const cache = cacheFactory.get('my-cache');\n   *\n   * @method CacheFactory#get\n   * @param {string} id The `id` of the {@link Cache} to retrieve.\n   * @returns {Cache} The {@link Cache} instance.\n   * @throws {ReferenceError} Throws a `ReferenceError` if the {@link Cache}\n   * does not exist.\n   */\n  get (id) {\n    const cache = this.caches[id]\n    if (!cache) {\n      throw new ReferenceError(`Cache \"${id}\" does not exist!`)\n    }\n    return cache\n  }\n\n  /**\n   * Returns information on this {@link CacheFactory} and its {@link Cache}\n   * instance.\n   *\n   * @example\n   * const info = cacheFactory.info();\n   * info.size; // 3\n   * info.caches['my-cache']; // { size: 1234, ... }\n   * info.caches['my-cache2']; // { size: 51, ... }\n   * info.caches['my-cache3']; // { size: 43, ... }\n   *\n   * @method CacheFactory#info\n   * @returns {object} The detailed information.\n   */\n  info () {\n    const keys = this.keys()\n    const info = {\n      size: keys.length,\n      caches: {}\n    }\n    keys.forEach((cacheId) => {\n      info.caches[cacheId] = this.get(cacheId).info()\n    })\n    Object.keys(CacheFactory.defaults).forEach((key, value) => {\n      info[key] = CacheFactory.defaults[key]\n    })\n    return info\n  }\n\n  /**\n   * Returns an array of identifiers of the {@link Cache} instances in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * const keys = cacheFactory.keys();\n   *\n   * @method CacheFactory#keys\n   * @returns {string[]} The {@link Cache} identifiers.\n   */\n  keys () {\n    return Object.keys(this.caches).filter((key) => this.caches[key])\n  }\n\n  /**\n   * Returns an object of key-value pairs representing the identifiers of the\n   * {@link Cache} instances in this {@link CacheFactory}.\n   *\n   * @example\n   * const keySet = cacheFactory.keySet();\n   *\n   * @method CacheFactory#keySet\n   * @returns {object} The {@link Cache} identifiers.\n   */\n  keySet () {\n    const set = {}\n    this.keys().forEach((key) => {\n      set[key] = key\n    })\n    return set\n  }\n\n  /**\n   * Calls {@link Cache#removeExpired} on each {@link Cache} in this\n   * {@link CacheFactory} and returns the removed items, if any.\n   *\n   * @example\n   * const expired = cacheFactory.removeExpiredFromAll();\n   *\n   * @method CacheFactory#removeExpiredFromAll\n   * @returns {object} The removed items, if any.\n   */\n  removeExpiredFromAll () {\n    const expired = {}\n    this.keys().forEach((id) => {\n      expired[id] = this.get(id).removeExpired()\n    })\n    return expired\n  }\n\n  /**\n   * Calls {@link Cache#touch} on each {@link Cache} in this\n   * {@link CacheFactory}.\n   *\n   * @example\n   * cacheFactory.touchAll();\n   *\n   * @method CacheFactory#touchAll\n   */\n  touchAll () {\n    this.keys().forEach((cacheId) => {\n      this.get(cacheId).touch()\n    })\n  }\n}\n","import BinaryHeap from '../node_modules/yabh/src/index'\nimport Cache from './Cache'\nimport CacheFactory from './CacheFactory'\nimport defaults from './defaults'\nimport utils from './utils'\n\n/**\n * Registered as `cachefactory` in NPM and Bower.\n *\n * @module cachefactory\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save cachefactory\n * @example <caption>Install from Bower</caption>\n * bower i --save cachefactory\n * @example <caption>Load into your app via script tag</caption>\n * <script src=\"/path/to/cachefactory.min.js\"></script>\n * @example <caption>Load into your app via CommonJS</caption>\n * var CacheFactory = require('cachefactory');\n * @example <caption>Load into your app via ES2015 Modules</caption>\n * import CacheFactory from 'cachefactory';\n * @example <caption>Load into your app via AMD</caption>\n * define('myApp', ['cachefactory'], function (CacheFactory) { ... })\n */\nexport default CacheFactory\n\n/**\n * The `BinaryHeap` constructor function.\n *\n * @example\n * import CacheFactory from 'cachefactory';\n * const { BinaryHeap } = CacheFactory;\n *\n * @name BinaryHeap\n * @memberof module:cachefactory\n * @see https://github.com/jmdobry/yabh\n * @type {function}\n */\nCacheFactory.BinaryHeap = BinaryHeap\n\n/**\n * The {@link Cache} constructor function.\n *\n * @example\n * import CacheFactory from 'cachefactory';\n * const { Cache } = CacheFactory;\n *\n * @name Cache\n * @memberof module:cachefactory\n * @see Cache\n * @type {function}\n */\nCacheFactory.Cache = Cache\n\n/**\n * The default cache values. Modify this object to change the default values.\n *\n * @example\n * import CacheFactory from 'cachefactory';\n * const { defaults } = CacheFactory;\n *\n * // Change the default \"maxAge\" for caches that will be instantiated\n * // after this point.\n * defaults.maxAge = 60 * 60 * 1000;\n *\n * @name defaults\n * @memberof module:cachefactory\n * @see Cache\n * @type {object}\n */\nCacheFactory.defaults = defaults\n\n/**\n * Utility functions used throughout this library.\n *\n * @example\n * import Promise from 'bluebird';\n * import CacheFactory from 'cachefactory';\n * const { utils } = CacheFactory;\n *\n * // Make this library use your Promise lib\n * utils.Promise = Promise;\n *\n * @name utils\n * @memberof module:cachefactory\n * @type {object}\n */\nCacheFactory.utils = utils\n"],"names":["bubbleUp","heap","weightFunc","n","element","weight","parentN","Math","floor","parent","bubbleDown","length","node","nodeWeight","child2N","child1N","swap","child1","child1Weight","child2","child2Weight","BinaryHeap","compareFunc","x","y","Error","BHProto","prototype","push","peek","pop","front","end","remove","i","removed","removeAll","size","Number","MAX_VALUE","_Promise","window","Promise","e","utils","a","b","value","JSON","parse","isFunction","then","stringify","assignMsg","Cache","id","options","isString","TypeError","defineProperties","writable","undefined","accessed","equals","$$cacheFlushInterval","$$capacity","$$deleteOnExpire","$$enabled","$$maxAge","$$onExpire","$$recycleFreq","$$storageMode","$$storagePrefix","$$storeOnReject","$$storeOnResolve","setOptions","$$initializing","$$cacheFlushIntervalId","$$recycleFreqId","$$storage","removeItem","$$prefix","$$data","$$lruHeap","$$expiresHeap","$$parent","caches","key","Array","isArray","keys","values","forEach","get","isNumber","enabled","isObject","onExpire","item","$$promises","itemJson","getItem","fromJson","now","Date","getTime","expires","call","setItem","toJson","created","maxAge","capacity","deleteOnExpire","cacheFlushInterval","recycleFreq","storageMode","keysJson","Object","filter","set","storeOnResolve","storeOnReject","getHandler","shouldStore","isError","v","status","data","headers","statusText","put","reject","isPromise","exists","_key","index","indexOf","splice","storage","expired","expiredItem","setInterval","setRecycleFreq","removeExpired","strict","storagePrefix","defaults","setDeleteOnExpire","setMaxAge","setCapacity","setCacheFlushInterval","setOnExpire","storageImpl","setStorageMode","prevStorage","prevData","shouldReInsert","items","load","prevDataIsObject","localStorage","sessionStorage","val","k","touch","map","CacheFactory","defineProperty","cacheId","destroy","disable","enable","cache","ReferenceError","info"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;AAMA,IAAMA,WAAW,SAAXA,QAAW,CAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,CAA5B,EAA+B;MACxCC,UAAUH,KAAKE,CAAL,CAAhB;MACME,SAASH,WAAWE,OAAX,CAAf;;SAEOD,IAAI,CAAX,EAAc;;QAERG,UAAUC,KAAKC,KAAL,CAAW,CAACL,IAAI,CAAL,IAAU,CAArB,IAA0B,CAAxC;QACIM,SAASR,KAAKK,OAAL,CAAb;;;QAGID,UAAUH,WAAWO,MAAX,CAAd,EAAkC;;KAAlC,MAEO;WACAH,OAAL,IAAgBF,OAAhB;WACKD,CAAL,IAAUM,MAAV;UACIH,OAAJ;;;CAfN;;;;;;;;AA0BA,IAAMI,aAAa,SAAbA,UAAa,CAAUT,IAAV,EAAgBC,UAAhB,EAA4BC,CAA5B,EAA+B;MAC5CQ,SAASV,KAAKU,MAAlB;MACIC,OAAOX,KAAKE,CAAL,CAAX;MACIU,aAAaX,WAAWU,IAAX,CAAjB;;SAEO,IAAP,EAAa;QACPE,UAAU,CAACX,IAAI,CAAL,IAAU,CAAxB;QACIY,UAAUD,UAAU,CAAxB;QACIE,OAAO,IAAX;QACID,UAAUJ,MAAd,EAAsB;UAChBM,SAAShB,KAAKc,OAAL,CAAb;UACIG,eAAehB,WAAWe,MAAX,CAAnB;;UAEIC,eAAeL,UAAnB,EAA+B;eACtBE,OAAP;;;;QAIAD,UAAUH,MAAd,EAAsB;UAChBQ,SAASlB,KAAKa,OAAL,CAAb;UACIM,eAAelB,WAAWiB,MAAX,CAAnB;UACIC,gBAAgBJ,SAAS,IAAT,GAAgBH,UAAhB,GAA6BX,WAAWD,KAAKc,OAAL,CAAX,CAA7C,CAAJ,EAA6E;eACpED,OAAP;;;;QAIAE,SAAS,IAAb,EAAmB;;KAAnB,MAEO;WACAb,CAAL,IAAUF,KAAKe,IAAL,CAAV;WACKA,IAAL,IAAaJ,IAAb;UACII,IAAJ;;;CA/BN;;AAoCA,SAASK,UAAT,CAAqBnB,UAArB,EAAiCoB,WAAjC,EAA8C;MACxC,CAACpB,UAAL,EAAiB;iBACF,oBAAUqB,CAAV,EAAa;aAASA,CAAP;KAA5B;;MAEE,CAACD,WAAL,EAAkB;kBACF,qBAAUC,CAAV,EAAaC,CAAb,EAAgB;aAASD,MAAMC,CAAb;KAAhC;;MAEE,OAAOtB,UAAP,KAAsB,UAA1B,EAAsC;UAC9B,IAAIuB,KAAJ,CAAU,2EAAV,CAAN;;MAEE,OAAOH,WAAP,KAAuB,UAA3B,EAAuC;UAC/B,IAAIG,KAAJ,CAAU,4EAAV,CAAN;;OAEGvB,UAAL,GAAkBA,UAAlB;OACKoB,WAAL,GAAmBA,WAAnB;OACKrB,IAAL,GAAY,EAAZ;;;AAGF,IAAIyB,UAAUL,WAAWM,SAAzB;;AAEAD,QAAQE,IAAR,GAAe,UAAUhB,IAAV,EAAgB;OACxBX,IAAL,CAAU2B,IAAV,CAAehB,IAAf;WACS,KAAKX,IAAd,EAAoB,KAAKC,UAAzB,EAAqC,KAAKD,IAAL,CAAUU,MAAV,GAAmB,CAAxD;CAFF;;AAKAe,QAAQG,IAAR,GAAe,YAAY;SAClB,KAAK5B,IAAL,CAAU,CAAV,CAAP;CADF;;AAIAyB,QAAQI,GAAR,GAAc,YAAY;MACpBC,QAAQ,KAAK9B,IAAL,CAAU,CAAV,CAAZ;MACI+B,MAAM,KAAK/B,IAAL,CAAU6B,GAAV,EAAV;MACI,KAAK7B,IAAL,CAAUU,MAAV,GAAmB,CAAvB,EAA0B;SACnBV,IAAL,CAAU,CAAV,IAAe+B,GAAf;eACW,KAAK/B,IAAhB,EAAsB,KAAKC,UAA3B,EAAuC,CAAvC;;SAEK6B,KAAP;CAPF;;AAUAL,QAAQO,MAAR,GAAiB,UAAUrB,IAAV,EAAgB;MAC3BD,SAAS,KAAKV,IAAL,CAAUU,MAAvB;OACK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIvB,MAApB,EAA4BuB,GAA5B,EAAiC;QAC3B,KAAKZ,WAAL,CAAiB,KAAKrB,IAAL,CAAUiC,CAAV,CAAjB,EAA+BtB,IAA/B,CAAJ,EAA0C;UACpCuB,UAAU,KAAKlC,IAAL,CAAUiC,CAAV,CAAd;UACIF,MAAM,KAAK/B,IAAL,CAAU6B,GAAV,EAAV;UACII,MAAMvB,SAAS,CAAnB,EAAsB;aACfV,IAAL,CAAUiC,CAAV,IAAeF,GAAf;iBACS,KAAK/B,IAAd,EAAoB,KAAKC,UAAzB,EAAqCgC,CAArC;mBACW,KAAKjC,IAAhB,EAAsB,KAAKC,UAA3B,EAAuCgC,CAAvC;;aAEKC,OAAP;;;SAGG,IAAP;CAdF;;AAiBAT,QAAQU,SAAR,GAAoB,YAAY;OACzBnC,IAAL,GAAY,EAAZ;CADF;;AAIAyB,QAAQW,IAAR,GAAe,YAAY;SAClB,KAAKpC,IAAL,CAAUU,MAAjB;CADF,CAIA;;ACpIA,eAAe;YACH2B,OAAOC,SADJ;sBAEO,IAFP;kBAGG,MAHH;WAIJ,IAJI;YAKH,IALG;UAMLD,OAAOC,SANF;eAOA,IAPA;eAQA,QARA;eASA,IATA;iBAUE,sBAVF;iBAWE,KAXF;kBAYG;CAZlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,IAAIC,WAAW,IAAf;AACA,IAAI;aACSC,OAAOC,OAAlB;CADF,CAEE,OAAOC,CAAP,EAAU;;;;;;;;;;;;AAYZ,IAAMC,QAAQ;;;;;;;;;;;;;;;QAAA,kBAeJC,CAfI,EAeDC,CAfC,EAeE;WACLD,MAAMC,CAAb;GAhBU;;;;;;;;;;;;;;;;;UAAA,oBAiCFC,KAjCE,EAiCK;WACRC,KAAKC,KAAL,CAAWF,KAAX,CAAP;GAlCU;;;;;;;;;;;;;;;;;YAAA,sBAmDAA,KAnDA,EAmDO;WACV,OAAOA,KAAP,KAAiB,UAAxB;GApDU;;;;;;;;;;;;;;;;;;;UAAA,oBAuEFA,KAvEE,EAuEK;WACR,OAAOA,KAAP,KAAiB,QAAxB;GAxEU;;;;;;;;;;;;;;;;;UAAA,oBAyFFA,KAzFE,EAyFK;WACRA,UAAU,IAAV,IAAkB,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAA1C;GA1FU;WAAA,qBA6FDA,KA7FC,EA6FM;WACTA,SAASH,MAAMM,UAAN,CAAiBH,MAAMI,IAAvB,CAAhB;GA9FU;;;;;;;;;;;;;;;;;UAAA,oBA+GFJ,KA/GE,EA+GK;WACR,OAAOA,KAAP,KAAiB,QAAxB;GAhHU;;;;;;;;;;;;;;;;;QAAA,kBAiIJA,KAjII,EAiIG;WACNC,KAAKI,SAAL,CAAeL,KAAf,CAAP;GAlIU;;;WAqIHP;CArIX,CAwIA;;ACnJA,IAAMa,iDAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoDqBC;iBACNC,EAAb,EAA+B;;;QAAdC,OAAc,yDAAJ,EAAI;;;QACzB,CAACZ,MAAMa,QAAN,CAAeF,EAAf,CAAL,EAAyB;YACjB,IAAIG,SAAJ,0BAAN;;;WAGKC,gBAAP,CAAwB,IAAxB,EAA8B;;4BAEN,EAAEC,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAFM;8BAGJ,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAHI;kBAIhB,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAJgB;cAKpB,EAAED,UAAU,IAAZ,EAAkBb,OAAO,EAAzB,EALoB;wBAMV,EAAEa,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EANU;iBAOjB,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAPiB;qBAQb,EAAED,UAAU,IAAZ,EAAkBb,OAAO,IAAI1B,UAAJ,CAAe,UAACE,CAAD;iBAAOA,EAAEuC,QAAT;SAAf,EAAkClB,MAAMmB,MAAxC,CAAzB,EARa;sBASZ,EAAEH,UAAU,IAAZ,EAAkBb,OAAO,IAAzB,EATY;iBAUjB,EAAEa,UAAU,IAAZ,EAAkBb,OAAO,IAAI1B,UAAJ,CAAe,UAACE,CAAD;iBAAOA,EAAEuC,QAAT;SAAf,EAAkClB,MAAMmB,MAAxC,CAAzB,EAViB;gBAWlB,EAAEH,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAXkB;kBAYhB,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAZgB;gBAalB,EAAED,UAAU,IAAZ,EAAkBb,OAAO,EAAzB,EAbkB;kBAchB,EAAEa,UAAU,IAAZ,EAAkBb,OAAO,EAAzB,EAdgB;qBAeb,EAAEa,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAfa;uBAgBX,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAhBW;iBAiBjB,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAjBiB;qBAkBb,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAlBa;uBAmBX,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EAnBW;uBAoBX,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EApBW;wBAqBV,EAAED,UAAU,IAAZ,EAAkBb,OAAOc,SAAzB,EArBU;;;gBAwBlB,EAAEd,OAAOS,QAAQ/C,MAAjB,EAxBkB;;;;;;;;;;;;;;;;;;;;;0BA6CR;oBACN,IADM;aAEb;iBAAM,MAAKuD,oBAAX;SAFa;aAGb,eAAM;gBAAQ,IAAIvC,KAAJ,CAAa4B,SAAb,6BAAN;;OAhDa;;;;;;;;;;;;;;;;;;;;;gBAsElB;oBACI,IADJ;aAEH;iBAAM,MAAKY,UAAX;SAFG;aAGH,eAAM;gBAAQ,IAAIxC,KAAJ,CAAa4B,SAAb,mBAAN;;OAzEa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA+GZ;oBACF,IADE;aAET;iBAAM,MAAKa,gBAAX;SAFS;aAGT,eAAM;gBAAQ,IAAIzC,KAAJ,CAAa4B,SAAb,yBAAN;;OAlHa;;;;;;;;;;;;;;;;;;;;;;;;eA2InB;oBACK,IADL;aAEF;iBAAM,MAAKc,SAAX;SAFE;aAGF,eAAM;gBAAQ,IAAI1C,KAAJ,CAAa4B,SAAb,kBAAN;;OA9Ia;;;;;;;;;;UAyJxB;oBACU,IADV;eAEKE;OA3JmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA+LpB;oBACM,IADN;aAED;iBAAM,MAAKa,QAAX;SAFC;aAGD,eAAM;gBAAQ,IAAI3C,KAAJ,CAAa4B,SAAb,iBAAN;;OAlMa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAmPlB;oBACI,IADJ;aAEH;iBAAM,MAAKgB,UAAX;SAFG;aAGH,eAAM;gBAAQ,IAAI5C,KAAJ,CAAa4B,SAAb,mBAAN;;OAtPa;;;;;;;;;;;;;;;;;;;;;;;;;;mBAiRf;oBACC,IADD;aAEN;iBAAM,MAAKiB,aAAX;SAFM;aAGN,eAAM;gBAAQ,IAAI7C,KAAJ,CAAa4B,SAAb,sBAAN;;OApRa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAqUf;oBACC,IADD;aAEN;iBAAM,MAAKkB,aAAX;SAFM;aAGN,eAAM;gBAAQ,IAAI9C,KAAJ,CAAa4B,SAAb,sBAAN;;OAxUa;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAoWb;oBACD,IADC;aAER;iBAAM,MAAKmB,eAAX;SAFQ;aAGR,eAAM;gBAAQ,IAAI/C,KAAJ,CAAa4B,SAAb,wBAAN;;OAvWa;;;;;;;;;;;;;qBAqXb;oBACD,IADC;aAER;iBAAM,MAAKoB,eAAX;SAFQ;aAGR,eAAM;gBAAQ,IAAIhD,KAAJ,CAAa4B,SAAb,wBAAN;;OAxXa;;;;;;;;;;;;;sBAsYZ;oBACF,IADE;aAET;iBAAM,MAAKqB,gBAAX;SAFS;aAGT,eAAM;gBAAQ,IAAIjD,KAAJ,CAAa4B,SAAb,yBAAN;;;KAzYjB;;SA6YKsB,UAAL,CAAgBnB,OAAhB,EAAyB,IAAzB;SACKoB,cAAL,GAAsB,KAAtB;;;;;;;;;;;;;;;8BAWS;oBACK,KAAKC,sBAAnB;oBACc,KAAKC,eAAnB;WACK1C,SAAL;UACI,KAAK2C,SAAT,EAAoB;aACbA,SAAL,GAAiBC,UAAjB,CAA+B,KAAKC,QAApC;aACKF,SAAL,GAAiBC,UAAjB,CAA4B,KAAKC,QAAjC;;WAEGF,SAAL,GAAiB,IAAjB;WACKG,MAAL,GAAc,IAAd;WACKC,SAAL,GAAiB,IAAjB;WACKC,aAAL,GAAqB,IAArB;WACKH,QAAL,GAAgB,IAAhB;UACI,KAAKI,QAAT,EAAmB;aACZA,QAAL,CAAcC,MAAd,CAAqB,KAAK/B,EAA1B,IAAgCM,SAAhC;;;;;;;;;;;;;;;8BAYO;WACJM,SAAL,GAAiB,KAAjB;;;;;;;;;;;;;;6BAWQ;WACHA,SAAL,GAAiB,IAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAqDGoB,KAAmB;;;UAAd/B,OAAc,yDAAJ,EAAI;;UAClBgC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;;cAChBG,OAAOH,GAAb;cACMI,SAAS,EAAf;;eAEKC,OAAL,CAAa,UAACL,GAAD,EAAS;gBACdxC,QAAQ,OAAK8C,GAAL,CAASN,GAAT,EAAc/B,OAAd,CAAd;gBACIT,UAAU,IAAV,IAAkBA,UAAUc,SAAhC,EAA2C;qBAClCjC,IAAP,CAAYmB,KAAZ;;WAHJ;;;eAOO4C;;;;;OAXT,MAYO;YACD/C,MAAMkD,QAAN,CAAeP,GAAf,CAAJ,EAAyB;gBACjB,KAAKA,GAAX;;;YAGE,CAAC,KAAKQ,OAAV,EAAmB;;;;;UAKjB,CAACnD,MAAMa,QAAN,CAAe8B,GAAf,CAAL,EAA0B;cAClB,IAAI7B,SAAJ,2BAAN;OADF,MAEO,IAAI,CAACF,OAAD,IAAY,CAACZ,MAAMoD,QAAN,CAAexC,OAAf,CAAjB,EAA0C;cACzC,IAAIE,SAAJ,gCAAN;OADK,MAEA,IAAIF,QAAQyC,QAAR,IAAoB,CAACrD,MAAMM,UAAN,CAAiBM,QAAQyC,QAAzB,CAAzB,EAA6D;cAC5D,IAAIvC,SAAJ,0CAAN;;;UAGEwC,aAAJ;;UAEI,KAAKnB,SAAT,EAAoB;YACd,KAAKoB,UAAL,CAAgBZ,GAAhB,CAAJ,EAA0B;iBACjB,KAAKY,UAAL,CAAgBZ,GAAhB,CAAP;;;YAGIa,WAAW,KAAKrB,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,cAAkDM,GAAlD,CAAjB;;YAEIa,QAAJ,EAAc;iBACLxD,MAAM0D,QAAN,CAAeF,QAAf,CAAP;;OARJ,MAUO,IAAIxD,MAAMoD,QAAN,CAAe,KAAKd,MAApB,CAAJ,EAAiC;eAC/B,KAAKA,MAAL,CAAYK,GAAZ,CAAP;;;UAGE,CAACW,IAAL,EAAW;;;;UAIPnD,QAAQmD,KAAKnD,KAAjB;UACIwD,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;;UAEI,KAAK1B,SAAT,EAAoB;aACbI,SAAL,CAAelD,MAAf,CAAsB;eACfsD,GADe;oBAEVW,KAAKpC;SAFjB;aAIKA,QAAL,GAAgByC,GAAhB;aACKpB,SAAL,CAAevD,IAAf,CAAoB;eACb2D,GADa;oBAERgB;SAFZ;OANF,MAUO;aACApB,SAAL,CAAelD,MAAf,CAAsBiE,IAAtB;aACKpC,QAAL,GAAgByC,GAAhB;aACKpB,SAAL,CAAevD,IAAf,CAAoBsE,IAApB;;;UAGE,KAAKhC,gBAAL,KAA0B,SAA1B,IAAuC,aAAagC,IAApD,IAA4DA,KAAKQ,OAAL,GAAeH,GAA/E,EAAoF;aAC7EtE,MAAL,CAAYsD,GAAZ;;YAEI,KAAKlB,UAAT,EAAqB;eACdA,UAAL,CAAgBkB,GAAhB,EAAqBW,KAAKnD,KAA1B,EAAiCS,QAAQyC,QAAzC;SADF,MAEO,IAAIzC,QAAQyC,QAAZ,EAAsB;kBACnBA,QAAR,CAAiBU,IAAjB,CAAsB,IAAtB,EAA4BpB,GAA5B,EAAiCW,KAAKnD,KAAtC;;gBAEMc,SAAR;OARF,MASO,IAAI,KAAKkB,SAAT,EAAoB;aACpBA,SAAL,GAAiB6B,OAAjB,CAA4B,KAAK3B,QAAjC,cAAkDM,GAAlD,EAAyD3C,MAAMiE,MAAN,CAAaX,IAAb,CAAzD;;;aAGKnD,KAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA+BIwC,KAAK;UACLA,GAAJ,EAAS;YACHW,aAAJ;YACI,KAAKnB,SAAT,EAAoB;cACZqB,WAAW,KAAKrB,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,cAAkDM,GAAlD,CAAjB;cACIa,QAAJ,EAAc;mBACLxD,MAAM0D,QAAN,CAAeF,QAAf,CAAP;;SAHJ,MAKO,IAAIxD,MAAMoD,QAAN,CAAe,KAAKd,MAApB,CAAJ,EAAiC;iBAC/B,KAAKA,MAAL,CAAYK,GAAZ,CAAP;;YAEEW,IAAJ,EAAU;iBACD;qBACIA,KAAKY,OADT;sBAEKZ,KAAKpC,QAFV;qBAGIoC,KAAKQ,OAHT;uBAIO,IAAIF,IAAJ,GAAWC,OAAX,KAAuBP,KAAKY,OAA7B,IAAyCZ,KAAKa,MAAL,IAAe,KAAK3C,QAA7D;WAJb;;OAXJ,MAkBO;eACE;cACD,KAAKb,EADJ;oBAEK,KAAKyD,QAFV;kBAGG,KAAKD,MAHR;0BAIW,KAAKE,cAJhB;oBAKK,KAAKhB,QALV;8BAMe,KAAKiB,kBANpB;uBAOQ,KAAKC,WAPb;uBAQQ,KAAKC,WARb;uBASQ,KAAKrC,SAAL,GAAiB,KAAKA,SAAL,EAAjB,GAAoClB,SAT5C;mBAUI,KAAKkC,OAVT;gBAWC,KAAKZ,SAAL,IAAkB,KAAKA,SAAL,CAAe9C,IAAf,EAAlB,IAA2C;SAXnD;;;;;;;;;;;;;;;;2BAyBI;;;UACF,KAAK0C,SAAT,EAAoB;YACZsC,WAAW,KAAKtC,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,WAAjB;;YAEIoC,QAAJ,EAAc;iBACLzE,MAAM0D,QAAN,CAAee,QAAf,CAAP;SADF,MAEO;iBACE,EAAP;;OANJ,MAQO;eACEC,OAAO5B,IAAP,CAAY,KAAKR,MAAjB,EAAyBqC,MAAzB,CAAgC,UAAChC,GAAD;iBAAS,OAAKL,MAAL,CAAYK,GAAZ,CAAT;SAAhC,CAAP;;;;;;;;;;;;;;;;6BAaM;UACFiC,SAAM,EAAZ;WACK9B,IAAL,GAAYE,OAAZ,CAAoB,UAACL,GAAD,EAAS;eACvBA,GAAJ,IAAWA,GAAX;OADF;aAGOiC,MAAP;;;;;;;;;;;;;;;;;;;;wBAiBGjC,KAAKxC,OAAqB;;;UAAdS,OAAc,yDAAJ,EAAI;;UACvBiE,iBAAiBjE,QAAQiE,cAAR,KAA2B5D,SAA3B,GAAuC,CAAC,CAACL,QAAQiE,cAAjD,GAAkE,KAAK/C,gBAA9F;UACMgD,gBAAgBlE,QAAQkE,aAAR,KAA0B7D,SAA1B,GAAsC,CAAC,CAACL,QAAQkE,aAAhD,GAAgE,KAAKjD,eAA3F;;UAEMkD,aAAa,SAAbA,UAAa,CAACC,WAAD,EAAcC,OAAd,EAA0B;eACpC,UAACC,CAAD,EAAO;cACRF,WAAJ,EAAiB;mBACVzB,UAAL,CAAgBZ,GAAhB,IAAuB1B,SAAvB;gBACIjB,MAAMoD,QAAN,CAAe8B,CAAf,KAAqB,YAAYA,CAAjC,IAAsC,UAAUA,CAApD,EAAuD;kBACjD,CAACA,EAAEC,MAAH,EAAWD,EAAEE,IAAb,EAAmBF,EAAEG,OAAF,EAAnB,EAAgCH,EAAEI,UAAlC,CAAJ;qBACKC,GAAL,CAAS5C,GAAT,EAAcuC,CAAd;aAFF,MAGO;qBACAK,GAAL,CAAS5C,GAAT,EAAcuC,CAAd;;;cAGAD,OAAJ,EAAa;gBACPjF,MAAMF,OAAV,EAAmB;qBACVE,MAAMF,OAAN,CAAc0F,MAAd,CAAqBN,CAArB,CAAP;aADF,MAEO;oBACCA,CAAN;;WAJJ,MAMO;mBACEA,CAAP;;SAjBJ;OADF;;UAuBI,CAAC,KAAK3D,SAAN,IAAmB,CAACvB,MAAMoD,QAAN,CAAe,KAAKd,MAApB,CAApB,IAAmDnC,UAAU,IAA7D,IAAqEA,UAAUc,SAAnF,EAA8F;;;UAG1FjB,MAAMkD,QAAN,CAAeP,GAAf,CAAJ,EAAyB;cACjB,KAAKA,GAAX;;;UAGE,CAAC3C,MAAMa,QAAN,CAAe8B,GAAf,CAAL,EAA0B;cAClB,IAAI7B,SAAJ,2BAAN;;;UAGI6C,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;UACMP,OAAO;aACNX,GADM;eAEJ3C,MAAMyF,SAAN,CAAgBtF,KAAhB,IAAyBA,MAAMI,IAAN,CAAWwE,WAAWF,cAAX,EAA2B,KAA3B,CAAX,EAA8CE,WAAWD,aAAX,EAA0B,IAA1B,CAA9C,CAAzB,GAA0G3E,KAFtG;iBAGFS,QAAQsD,OAAR,KAAoBjD,SAApB,GAAgC0C,GAAhC,GAAsC/C,QAAQsD,OAH5C;kBAIDtD,QAAQM,QAAR,KAAqBD,SAArB,GAAiC0C,GAAjC,GAAuC/C,QAAQM;OAJ3D;UAMIlB,MAAMkD,QAAN,CAAetC,QAAQuD,MAAvB,CAAJ,EAAoC;aAC7BA,MAAL,GAAcvD,QAAQuD,MAAtB;;;UAGEvD,QAAQkD,OAAR,KAAoB7C,SAAxB,EAAmC;aAC5B6C,OAAL,GAAeR,KAAKY,OAAL,IAAgBZ,KAAKa,MAAL,IAAe,KAAK3C,QAApC,CAAf;OADF,MAEO;aACAsC,OAAL,GAAelD,QAAQkD,OAAvB;;;UAGE,KAAK3B,SAAT,EAAoB;YACdnC,MAAMyF,SAAN,CAAgBnC,KAAKnD,KAArB,CAAJ,EAAiC;eAC1BoD,UAAL,CAAgBZ,GAAhB,IAAuBW,KAAKnD,KAA5B;iBACO,KAAKoD,UAAL,CAAgBZ,GAAhB,CAAP;;YAEI8B,WAAW,KAAKtC,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,WAAjB;YACMS,OAAO2B,WAAWzE,MAAM0D,QAAN,CAAee,QAAf,CAAX,GAAsC,EAAnD;YACMjB,WAAW,KAAKrB,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,cAAkDM,GAAlD,CAAjB;;;YAGIa,QAAJ,EAAc;eACPnE,MAAL,CAAYsD,GAAZ;;;aAGGH,aAAL,CAAmBxD,IAAnB,CAAwB;eACjB2D,GADiB;mBAEbW,KAAKQ;SAFhB;;aAKKvB,SAAL,CAAevD,IAAf,CAAoB;eACb2D,GADa;oBAERW,KAAKpC;SAFjB;;aAKKiB,SAAL,GAAiB6B,OAAjB,CAA4B,KAAK3B,QAAjC,cAAkDM,GAAlD,EAAyD3C,MAAMiE,MAAN,CAAaX,IAAb,CAAzD;YACIoC,SAAS,KAAb;aACK1C,OAAL,CAAa,UAAC2C,IAAD,EAAU;cACjBA,SAAShD,GAAb,EAAkB;qBACP,IAAT;mBACO,KAAP;;SAHJ;YAMI,CAAC+C,MAAL,EAAa;eACN1G,IAAL,CAAU2D,GAAV;;aAEGR,SAAL,GAAiB6B,OAAjB,CAA4B,KAAK3B,QAAjC,YAAkDrC,MAAMiE,MAAN,CAAanB,IAAb,CAAlD;OAnCF,MAoCO;;YAED,KAAKR,MAAL,CAAYK,GAAZ,CAAJ,EAAsB;eACftD,MAAL,CAAYsD,GAAZ;;;aAGGH,aAAL,CAAmBxD,IAAnB,CAAwBsE,IAAxB;;aAEKf,SAAL,CAAevD,IAAf,CAAoBsE,IAApB;;aAEKhB,MAAL,CAAYK,GAAZ,IAAmBW,IAAnB;aACKC,UAAL,CAAgBZ,GAAhB,IAAuB1B,SAAvB;;;;UAIE,KAAKsB,SAAL,CAAe9C,IAAf,KAAwB,KAAK4B,UAAjC,EAA6C;aACtChC,MAAL,CAAY,KAAKkD,SAAL,CAAetD,IAAf,GAAsB0D,GAAlC;;;aAGKxC,KAAP;;;;;;;;;;;;;;;;2BAaMwC,KAAK;UACP3C,MAAMkD,QAAN,CAAeP,GAAf,CAAJ,EAAyB;cACjB,KAAKA,GAAX;;WAEGY,UAAL,CAAgBZ,GAAhB,IAAuB1B,SAAvB;UACI,KAAKkB,SAAT,EAAoB;YACZqB,WAAW,KAAKrB,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,cAAkDM,GAAlD,CAAjB;;YAEIa,QAAJ,EAAc;cACRF,OAAOtD,MAAM0D,QAAN,CAAeF,QAAf,CAAX;eACKjB,SAAL,CAAelD,MAAf,CAAsB;iBACfsD,GADe;sBAEVW,KAAKpC;WAFjB;eAIKsB,aAAL,CAAmBnD,MAAnB,CAA0B;iBACnBsD,GADmB;qBAEfW,KAAKQ;WAFhB;eAIK3B,SAAL,GAAiBC,UAAjB,CAA+B,KAAKC,QAApC,cAAqDM,GAArD;cACI8B,WAAW,KAAKtC,SAAL,GAAiBsB,OAAjB,CAA4B,KAAKpB,QAAjC,WAAf;cACIS,OAAO2B,WAAWzE,MAAM0D,QAAN,CAAee,QAAf,CAAX,GAAsC,EAAjD;cACImB,QAAQ9C,KAAK+C,OAAL,CAAalD,GAAb,CAAZ;;cAEIiD,SAAS,CAAb,EAAgB;iBACTE,MAAL,CAAYF,KAAZ,EAAmB,CAAnB;;eAEGzD,SAAL,GAAiB6B,OAAjB,CAA4B,KAAK3B,QAAjC,YAAkDrC,MAAMiE,MAAN,CAAanB,IAAb,CAAlD;iBACOQ,KAAKnD,KAAZ;;OAtBJ,MAwBO,IAAIH,MAAMoD,QAAN,CAAe,KAAKd,MAApB,CAAJ,EAAiC;YAClCnC,QAAQ,KAAKmC,MAAL,CAAYK,GAAZ,IAAmB,KAAKL,MAAL,CAAYK,GAAZ,EAAiBxC,KAApC,GAA4Cc,SAAxD;aACKsB,SAAL,CAAelD,MAAf,CAAsB,KAAKiD,MAAL,CAAYK,GAAZ,CAAtB;aACKH,aAAL,CAAmBnD,MAAnB,CAA0B,KAAKiD,MAAL,CAAYK,GAAZ,CAA1B;aACKL,MAAL,CAAYK,GAAZ,IAAmB1B,SAAnB;eACOd,KAAP;;;;;;;;;;;;;;;gCAYS;;;UACL4F,UAAU,KAAK5D,SAArB;UACMW,OAAO,KAAKA,IAAL,EAAb;WACKP,SAAL,CAAe/C,SAAf;WACKgD,aAAL,CAAmBhD,SAAnB;;UAEIuG,OAAJ,EAAa;kBACD/B,OAAV,CAAqB,KAAK3B,QAA1B,YAA2CrC,MAAMiE,MAAN,CAAa,EAAb,CAA3C;aACKjB,OAAL,CAAa,UAACL,GAAD,EAAS;oBACVP,UAAV,CAAwB,OAAKC,QAA7B,cAA8CM,GAA9C;SADF;OAFF,MAKO,IAAI3C,MAAMoD,QAAN,CAAe,KAAKd,MAApB,CAAJ,EAAiC;aACjCA,MAAL,GAAc,EAAd;;WAEGiB,UAAL,GAAkB,EAAlB;;;;;;;;;;;;;;;oCAYe;;;UACTI,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;UACMmC,UAAU,EAAhB;UACIC,oBAAJ;;aAEO,CAACA,cAAc,KAAKzD,aAAL,CAAmBvD,IAAnB,EAAf,KAA6CgH,YAAYnC,OAAZ,IAAuBH,GAA3E,EAAgF;gBACtEsC,YAAYtD,GAApB,IAA2BsD,YAAY9F,KAAZ,GAAoB8F,YAAY9F,KAAhC,GAAwC,IAAnE;aACKqC,aAAL,CAAmBtD,GAAnB;;;aAGK4D,IAAP,CAAYkD,OAAZ,EAAqBhD,OAArB,CAA6B,UAACL,GAAD,EAAS;eAC/BtD,MAAL,CAAYsD,GAAZ;OADF;;UAII,KAAKlB,UAAT,EAAqB;eACZqB,IAAP,CAAYkD,OAAZ,EAAqBhD,OAArB,CAA6B,UAACL,GAAD,EAAS;iBAC/BlB,UAAL,CAAgBkB,GAAhB,EAAqBqD,QAAQrD,GAAR,CAArB;SADF;;;aAKKqD,OAAP;;;;;;;;;;;;;;;;0CAaqB1B,oBAAoB;;;UACrCA,uBAAuB,IAA3B,EAAiC;aAC1BlD,oBAAL,GAA4B,IAA5B;OADF,MAEO,IAAI,CAACpB,MAAMkD,QAAN,CAAeoB,kBAAf,CAAL,EAAyC;cACxC,IAAIxD,SAAJ,0CAAN;OADK,MAEA,IAAIwD,sBAAsB,CAA1B,EAA6B;cAC5B,IAAIzF,KAAJ,mDAAN;;WAEGuC,oBAAL,GAA4BkD,kBAA5B;oBACc,KAAKrC,sBAAnB;WACKA,sBAAL,GAA8BhB,SAA9B;UACI,KAAKG,oBAAT,EAA+B;aACxBa,sBAAL,GAA8BiE,YAAY;iBAAM,OAAK1G,SAAL,EAAN;SAAZ,EAAoC,KAAK4B,oBAAzC,CAA9B;;;;;;;;;;;;;;;;;gCAcSgD,UAAU;UACjBA,aAAa,IAAjB,EAAuB;aAChB/C,UAAL,GAAkB3B,OAAOC,SAAzB;OADF,MAEO,IAAI,CAACK,MAAMkD,QAAN,CAAekB,QAAf,CAAL,EAA+B;cAC9B,IAAItD,SAAJ,gCAAN;OADK,MAEA,IAAIsD,YAAY,CAAhB,EAAmB;cAClB,IAAIvF,KAAJ,yCAAN;OADK,MAEA;aACAwC,UAAL,GAAkB+C,QAAlB;;UAEI7E,UAAU,EAAhB;aACO,KAAKgD,SAAL,CAAe9C,IAAf,KAAwB,KAAK4B,UAApC,EAAgD;gBACtC,KAAKkB,SAAL,CAAetD,IAAf,GAAsB0D,GAA9B,IAAqC,KAAKtD,MAAL,CAAY,KAAKkD,SAAL,CAAetD,IAAf,GAAsB0D,GAAlC,CAArC;;aAEKpD,OAAP;;;;;;;;;;;;;;;;sCAaiB8E,gBAAgB8B,gBAAgB;UAC7C9B,mBAAmB,IAAvB,EAA6B;yBACV,MAAjB;OADF,MAEO,IAAI,CAACrE,MAAMa,QAAN,CAAewD,cAAf,CAAL,EAAqC;cACpC,IAAIvD,SAAJ,sCAAN;OADK,MAEA,IAAIuD,mBAAmB,MAAnB,IAA6BA,mBAAmB,SAAhD,IAA6DA,mBAAmB,YAApF,EAAkG;cACjG,IAAIxF,KAAJ,+DAAN;;WAEGyC,gBAAL,GAAwB+C,cAAxB;UACI8B,mBAAmB,KAAvB,EAA8B;aACvBA,cAAL,CAAoB,KAAKzE,aAAzB;;;;;;;;;;;;;;;;;8BAcOyC,QAAQ;;;UACbA,WAAW,IAAf,EAAqB;aACd3C,QAAL,GAAgB9B,OAAOC,SAAvB;OADF,MAEO,IAAI,CAACK,MAAMkD,QAAN,CAAeiB,MAAf,CAAL,EAA6B;cAC5B,IAAIrD,SAAJ,8BAAN;OADK,MAEA,IAAIqD,UAAU,CAAd,EAAiB;cAChB,IAAItF,KAAJ,uCAAN;OADK,MAEA;aACA2C,QAAL,GAAgB2C,MAAhB;;UAEIrB,OAAO,KAAKA,IAAL,EAAb;;WAEKN,aAAL,CAAmBhD,SAAnB;;UAEI,KAAK2C,SAAT,EAAoB;aACba,OAAL,CAAa,UAACL,GAAD,EAAS;cACda,WAAW,OAAKrB,SAAL,GAAiBsB,OAAjB,CAA4B,OAAKpB,QAAjC,cAAkDM,GAAlD,CAAjB;cACIa,QAAJ,EAAc;gBACNF,OAAOtD,MAAM0D,QAAN,CAAeF,QAAf,CAAb;gBACI,OAAKhC,QAAL,KAAkB9B,OAAOC,SAA7B,EAAwC;mBACjCmE,OAAL,GAAepE,OAAOC,SAAtB;aADF,MAEO;mBACAmE,OAAL,GAAeR,KAAKY,OAAL,IAAgBZ,KAAKa,MAAL,IAAe,OAAK3C,QAApC,CAAf;;mBAEGgB,aAAL,CAAmBxD,IAAnB,CAAwB;mBACjB2D,GADiB;uBAEbW,KAAKQ;aAFhB;;SATJ;OADF,MAgBO;aACAd,OAAL,CAAa,UAACL,GAAD,EAAS;cACdW,OAAO,OAAKhB,MAAL,CAAYK,GAAZ,CAAb;cACIW,IAAJ,EAAU;gBACJ,OAAK9B,QAAL,KAAkB9B,OAAOC,SAA7B,EAAwC;mBACjCmE,OAAL,GAAepE,OAAOC,SAAtB;aADF,MAEO;mBACAmE,OAAL,GAAeR,KAAKY,OAAL,IAAgBZ,KAAKa,MAAL,IAAe,OAAK3C,QAApC,CAAf;;mBAEGgB,aAAL,CAAmBxD,IAAnB,CAAwBsE,IAAxB;;SARJ;;;UAaE,KAAKhC,gBAAL,KAA0B,YAA9B,EAA4C;eACnC,KAAK8E,aAAL,EAAP;OADF,MAEO;eACE,EAAP;;;;;;;;;;;;;;;;;;;gCAgBS/C,UAAU;UACjBA,aAAa,IAAjB,EAAuB;aAChB5B,UAAL,GAAkB,IAAlB;OADF,MAEO,IAAI,CAACzB,MAAMM,UAAN,CAAiB+C,QAAjB,CAAL,EAAiC;cAChC,IAAIvC,SAAJ,kCAAN;OADK,MAEA;aACAW,UAAL,GAAkB4B,QAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAwBsC;UAA9BzC,OAA8B,yDAApB,EAAoB;UAAhByF,MAAgB,yDAAP,KAAO;;UACpC,CAACrG,MAAMoD,QAAN,CAAexC,OAAf,CAAL,EAA8B;cACtB,IAAIE,SAAJ,gCAAN;;;UAGEF,QAAQ0F,aAAR,KAA0BrF,SAA9B,EAAyC;aAClCW,eAAL,GAAuBhB,QAAQ0F,aAA/B;OADF,MAEO,IAAID,MAAJ,EAAY;aACZzE,eAAL,GAAuB2E,SAASD,aAAhC;;;WAGGjE,QAAL,GAAgB,KAAKT,eAAL,GAAuB,KAAKjB,EAA5C;;UAEIC,QAAQuC,OAAR,KAAoBlC,SAAxB,EAAmC;aAC5BM,SAAL,GAAiB,CAAC,CAACX,QAAQuC,OAA3B;OADF,MAEO,IAAIkD,MAAJ,EAAY;aACZ9E,SAAL,GAAiBgF,SAASpD,OAA1B;;;UAGEvC,QAAQyD,cAAR,KAA2BpD,SAA/B,EAA0C;aACnCuF,iBAAL,CAAuB5F,QAAQyD,cAA/B,EAA+C,KAA/C;OADF,MAEO,IAAIgC,MAAJ,EAAY;aACZG,iBAAL,CAAuBD,SAASlC,cAAhC,EAAgD,KAAhD;;;UAGEzD,QAAQ2D,WAAR,KAAwBtD,SAA5B,EAAuC;aAChCkF,cAAL,CAAoBvF,QAAQ2D,WAA5B;OADF,MAEO,IAAI8B,MAAJ,EAAY;aACZF,cAAL,CAAoBI,SAAShC,WAA7B;;;UAGE3D,QAAQuD,MAAR,KAAmBlD,SAAvB,EAAkC;aAC3BwF,SAAL,CAAe7F,QAAQuD,MAAvB;OADF,MAEO,IAAIkC,MAAJ,EAAY;aACZI,SAAL,CAAeF,SAASpC,MAAxB;;;UAGEvD,QAAQiE,cAAR,KAA2B5D,SAA/B,EAA0C;aACnCa,gBAAL,GAAwB,CAAC,CAAClB,QAAQiE,cAAlC;OADF,MAEO,IAAIwB,MAAJ,EAAY;aACZvE,gBAAL,GAAwByE,SAAS1B,cAAjC;;;UAGEjE,QAAQkE,aAAR,KAA0B7D,SAA9B,EAAyC;aAClCY,eAAL,GAAuB,CAAC,CAACjB,QAAQkE,aAAjC;OADF,MAEO,IAAIuB,MAAJ,EAAY;aACZxE,eAAL,GAAuB0E,SAASzB,aAAhC;;;UAGElE,QAAQwD,QAAR,KAAqBnD,SAAzB,EAAoC;aAC7ByF,WAAL,CAAiB9F,QAAQwD,QAAzB;OADF,MAEO,IAAIiC,MAAJ,EAAY;aACZK,WAAL,CAAiBH,SAASnC,QAA1B;;;UAGExD,QAAQ0D,kBAAR,KAA+BrD,SAAnC,EAA8C;aACvC0F,qBAAL,CAA2B/F,QAAQ0D,kBAAnC;OADF,MAEO,IAAI+B,MAAJ,EAAY;aACZM,qBAAL,CAA2BJ,SAASjC,kBAApC;;;UAGE1D,QAAQyC,QAAR,KAAqBpC,SAAzB,EAAoC;aAC7B2F,WAAL,CAAiBhG,QAAQyC,QAAzB;OADF,MAEO,IAAIgD,MAAJ,EAAY;aACZO,WAAL,CAAiBL,SAASlD,QAA1B;;;UAGEzC,QAAQ4D,WAAR,KAAwBvD,SAAxB,IAAqCL,QAAQiG,WAAR,KAAwB5F,SAAjE,EAA4E;aACrE6F,cAAL,CAAoBlG,QAAQ4D,WAAR,IAAuB+B,SAAS/B,WAApD,EAAiE5D,QAAQiG,WAAR,IAAuBN,SAASM,WAAjG;OADF,MAEO,IAAIR,MAAJ,EAAY;aACZS,cAAL,CAAoBP,SAAS/B,WAA7B,EAA0C+B,SAASM,WAAnD;;;;;;;;;;;;;;;;;mCAcYtC,aAAa;;;UACvBA,gBAAgB,IAApB,EAA0B;aACnB7C,aAAL,GAAqB,IAArB;OADF,MAEO,IAAI,CAAC1B,MAAMkD,QAAN,CAAeqB,WAAf,CAAL,EAAkC;cACjC,IAAIzD,SAAJ,mCAAN;OADK,MAEA,IAAIyD,eAAe,CAAnB,EAAsB;cACrB,IAAI1F,KAAJ,4CAAN;OADK,MAEA;aACA6C,aAAL,GAAqB6C,WAArB;;oBAEY,KAAKrC,eAAnB;UACI,KAAKZ,gBAAL,KAA0B,YAA1B,IAA0C,KAAKI,aAAnD,EAAkE;aAC3DQ,eAAL,GAAuBgE,YAAY;iBAAM,OAAKE,aAAL,EAAN;SAAZ,EAAwC,KAAK1E,aAA7C,CAAvB;OADF,MAEO;aACAQ,eAAL,GAAuBjB,SAAvB;;;;;;;;;;;;;;mCAWYuD,aAAaqC,aAAa;;;UACpC,CAAC7G,MAAMa,QAAN,CAAe2D,WAAf,CAAL,EAAkC;cAC1B,IAAI1D,SAAJ,mCAAN;OADF,MAEO,IAAI0D,gBAAgB,QAAhB,IAA4BA,gBAAgB,cAA5C,IAA8DA,gBAAgB,gBAAlF,EAAoG;cACnG,IAAI3F,KAAJ,wEAAN;;;UAGIkI,cAAc,KAAK5E,SAAzB;UACM6E,WAAW,KAAK1E,MAAtB;UACI2E,iBAAiB,KAArB;UACIC,QAAQ,EAAZ;;UAEMC,OAAO,SAAPA,IAAO,CAACJ,WAAD,EAAcC,QAAd,EAA2B;YAChClE,OAAO,QAAKA,IAAL,EAAb;YACMsE,mBAAmBpH,MAAMoD,QAAN,CAAe4D,QAAf,CAAzB;aACKhE,OAAL,CAAa,UAACL,GAAD,EAAS;cAChBoE,WAAJ,EAAiB;gBACTvD,WAAWuD,cAActD,OAAd,CAAyB,QAAKpB,QAA9B,cAA+CM,GAA/C,CAAjB;gBACIa,QAAJ,EAAc;oBACNb,GAAN,IAAa3C,MAAM0D,QAAN,CAAeF,QAAf,CAAb;;WAHJ,MAKO,IAAI4D,gBAAJ,EAAsB;kBACrBzE,GAAN,IAAaqE,SAASrE,GAAT,CAAb;;kBAEGtD,MAAL,CAAYsD,GAAZ;6BACmBsE,iBAAiB,IAApC;SAVF;OAHF;;UAiBI,CAAC,KAAKjF,cAAV,EAA0B;aACnB+E,WAAL,EAAkBC,QAAlB;;;WAGGrF,aAAL,GAAqB6C,WAArB;;UAEIqC,WAAJ,EAAiB;YACX,CAAC7G,MAAMoD,QAAN,CAAeyD,WAAf,CAAL,EAAkC;gBAC1B,IAAI/F,SAAJ,oCAAN;SADF,MAEO,IAAI,OAAO+F,YAAY7C,OAAnB,KAA+B,UAAnC,EAA+C;gBAC9C,IAAInF,KAAJ,uDAAN;SADK,MAEA,IAAI,OAAOgI,YAAYpD,OAAnB,KAA+B,UAAnC,EAA+C;gBAC9C,IAAI5E,KAAJ,gDAAN;SADK,MAEA,IAAI,OAAOgI,YAAYzE,UAAnB,KAAkC,UAAtC,EAAkD;gBACjD,IAAIvD,KAAJ,mDAAN;;aAEGsD,SAAL,GAAiB;iBAAM0E,WAAN;SAAjB;OAVF,MAWO,IAAI,KAAKlF,aAAL,KAAuB,cAA3B,EAA2C;YAC5C;uBACWqC,OAAb,CAAqB,cAArB,EAAqC,cAArC;uBACa5B,UAAb,CAAwB,cAAxB;eACKD,SAAL,GAAiB;mBAAMkF,YAAN;WAAjB;SAHF,CAIE,OAAOtH,CAAP,EAAU;eACLoC,SAAL,GAAiB,IAAjB;eACKR,aAAL,GAAqB,QAArB;;OAPG,MASA,IAAI,KAAKA,aAAL,KAAuB,gBAA3B,EAA6C;YAC9C;yBACaqC,OAAf,CAAuB,cAAvB,EAAuC,cAAvC;yBACe5B,UAAf,CAA0B,cAA1B;eACKD,SAAL,GAAiB;mBAAMmF,cAAN;WAAjB;SAHF,CAIE,OAAOvH,CAAP,EAAU;eACLoC,SAAL,GAAiB,IAAjB;eACKR,aAAL,GAAqB,QAArB;;OAPG,MASA;aACAQ,SAAL,GAAiB,IAAjB;aACKR,aAAL,GAAqB,QAArB;;;UAGE,KAAKK,cAAT,EAAyB;aAClB,KAAKG,SAAV,EAAqB,KAAKG,MAA1B;;;UAGE2E,cAAJ,EAAoB;eACXnE,IAAP,CAAYoE,KAAZ,EAAmBlE,OAAnB,CAA2B,UAACL,GAAD,EAAS;cAC5BW,OAAO4D,MAAMvE,GAAN,CAAb;kBACK4C,GAAL,CAAS5C,GAAT,EAAcW,KAAKnD,KAAnB,EAA0B;qBACfmD,KAAKY,OADU;sBAEdZ,KAAKpC,QAFS;qBAGfoC,KAAKQ;WAHhB;SAFF;;;;;;;;;;;;;;;;;;;0BAuBGnB,KAAK/B,SAAS;;;UACf+B,GAAJ,EAAS;YACD4E,MAAM,KAAKtE,GAAL,CAASN,GAAT,EAAc;oBACd,kBAAC6E,CAAD,EAAItC,CAAJ;mBAAU,QAAKK,GAAL,CAASiC,CAAT,EAAYtC,CAAZ,CAAV;;SADA,CAAZ;YAGIqC,GAAJ,EAAS;eACFhC,GAAL,CAAS5C,GAAT,EAAc4E,GAAd,EAAmB3G,OAAnB;;OALJ,MAOO;YACCkC,OAAO,KAAKA,IAAL,EAAb;aACK,IAAIxD,IAAI,CAAb,EAAgBA,IAAIwD,KAAK/E,MAAzB,EAAiCuB,GAAjC,EAAsC;eAC/BmI,KAAL,CAAW3E,KAAKxD,CAAL,CAAX,EAAoBsB,OAApB;;;;;;;;;;;;;;;;;6BAcI;;;aACD,KAAKkC,IAAL,GAAY4E,GAAZ,CAAgB,UAAC/E,GAAD;eAAS,QAAKM,GAAL,CAASN,GAAT,CAAT;OAAhB,CAAP;;;;;;ACr3CJ;;;;;;;;;;;;IAYqBgF;0BACJ;;;WACNC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;gBAC1B,IAD0B;aAE7B;KAFT;;;;;;;;;;;;;;;;+BAeU;;;WACL9E,IAAL,GAAYE,OAAZ,CAAoB,UAAC6E,OAAD,EAAa;cAC1B5E,GAAL,CAAS4E,OAAT,EAAkBrI,SAAlB;OADF;;;;;;;;;;;;;;;;;;;;;;;;;;gCAyBWmB,IAAkB;UAAdC,OAAc,yDAAJ,EAAI;;UACzB,KAAK8B,MAAL,CAAY/B,EAAZ,CAAJ,EAAqB;cACb,IAAI9B,KAAJ,aAAoB8B,EAApB,uBAAN;;cAEM9C,MAAR,GAAiB,IAAjB;WACK6E,MAAL,CAAY/B,EAAZ,IAAkB,IAAIgH,aAAajH,KAAjB,CAAuBC,EAAvB,EAA2BC,OAA3B,CAAlB;aACO,KAAK8B,MAAL,CAAY/B,EAAZ,CAAP;;;;;;;;;;;;;;;;4BAaOA,IAAI;WACNsC,GAAL,CAAStC,EAAT,EAAamH,OAAb;WACKpF,MAAL,CAAY/B,EAAZ,IAAkBM,SAAlB;;;;;;;;;;;;;;;iCAYY;;;WACP6B,IAAL,GAAYE,OAAZ,CAAoB,UAACrC,EAAD,EAAQ;eACrBsC,GAAL,CAAStC,EAAT,EAAamH,OAAb;OADF;WAGKpF,MAAL,GAAc,EAAd;;;;;;;;;;;;;;;iCAYY;;;WACPI,IAAL,GAAYE,OAAZ,CAAoB,UAAC6E,OAAD,EAAa;eAC1B5E,GAAL,CAAS4E,OAAT,EAAkBE,OAAlB;OADF;;;;;;;;;;;;;;;gCAcW;;;WACNjF,IAAL,GAAYE,OAAZ,CAAoB,UAAC6E,OAAD,EAAa;eAC1B5E,GAAL,CAAS4E,OAAT,EAAkBG,MAAlB;OADF;;;;;;;;;;;;;;;;;2BAgBMrH,IAAI;aACH,CAAC,CAAC,KAAK+B,MAAL,CAAY/B,EAAZ,CAAT;;;;;;;;;;;;;;;;;;;wBAgBGA,IAAI;UACDsH,QAAQ,KAAKvF,MAAL,CAAY/B,EAAZ,CAAd;UACI,CAACsH,KAAL,EAAY;cACJ,IAAIC,cAAJ,aAA6BvH,EAA7B,uBAAN;;aAEKsH,KAAP;;;;;;;;;;;;;;;;;;;;2BAiBM;;;UACAnF,OAAO,KAAKA,IAAL,EAAb;UACMqF,OAAO;cACLrF,KAAK/E,MADA;gBAEH;OAFV;WAIKiF,OAAL,CAAa,UAAC6E,OAAD,EAAa;aACnBnF,MAAL,CAAYmF,OAAZ,IAAuB,OAAK5E,GAAL,CAAS4E,OAAT,EAAkBM,IAAlB,EAAvB;OADF;aAGOrF,IAAP,CAAY6E,aAAapB,QAAzB,EAAmCvD,OAAnC,CAA2C,UAACL,GAAD,EAAMxC,KAAN,EAAgB;aACpDwC,GAAL,IAAYgF,aAAapB,QAAb,CAAsB5D,GAAtB,CAAZ;OADF;aAGOwF,IAAP;;;;;;;;;;;;;;;;2BAaM;;;aACCzD,OAAO5B,IAAP,CAAY,KAAKJ,MAAjB,EAAyBiC,MAAzB,CAAgC,UAAChC,GAAD;eAAS,OAAKD,MAAL,CAAYC,GAAZ,CAAT;OAAhC,CAAP;;;;;;;;;;;;;;;;6BAaQ;UACFiC,SAAM,EAAZ;WACK9B,IAAL,GAAYE,OAAZ,CAAoB,UAACL,GAAD,EAAS;eACvBA,GAAJ,IAAWA,GAAX;OADF;aAGOiC,MAAP;;;;;;;;;;;;;;;;2CAasB;;;UAChBoB,UAAU,EAAhB;WACKlD,IAAL,GAAYE,OAAZ,CAAoB,UAACrC,EAAD,EAAQ;gBAClBA,EAAR,IAAc,OAAKsC,GAAL,CAAStC,EAAT,EAAayF,aAAb,EAAd;OADF;aAGOJ,OAAP;;;;;;;;;;;;;;;+BAYU;;;WACLlD,IAAL,GAAYE,OAAZ,CAAoB,UAAC6E,OAAD,EAAa;eAC1B5E,GAAL,CAAS4E,OAAT,EAAkBJ,KAAlB;OADF;;;;;;AChOJ;;;;;;;;;;;;AAYAE,eAAalJ,UAAb,GAA0BA,UAA1B;;;;;;;;;;;;;;AAcAkJ,eAAajH,KAAb,GAAqBA,KAArB;;;;;;;;;;;;;;;;;;AAkBAiH,eAAapB,QAAb,GAAwBA,QAAxB;;;;;;;;;;;;;;;;;AAiBAoB,eAAa3H,KAAb,GAAqBA,KAArB;;;;"}