{"name":"Cachefactory","tagline":"CacheFactory is a very simple and useful cache for the browser.","body":"## cachefactory [![bower version](https://img.shields.io/bower/v/cachefactory.svg?style=flat-square)](https://www.npmjs.org/package/cachefactory) [![npm version](https://img.shields.io/npm/v/cachefactory.svg?style=flat-square)](https://www.npmjs.org/package/cachefactory) [![Circle CI](https://img.shields.io/circleci/project/jmdobry/cachefactory/master.svg?style=flat-square)](https://circleci.com/gh/jmdobry/cachefactory/tree/master) [![npm downloads](https://img.shields.io/npm/dm/cachefactory.svg?style=flat-square)](https://www.npmjs.org/package/cachefactory) [![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://github.com/jmdobry/cachefactory/blob/master/LICENSE)\r\n\r\nCacheFactory is a very simple and useful cache.\r\n\r\n__Latest Release:__ [![Latest Release](https://img.shields.io/github/release/jmdobry/cachefactory.svg?style=flat-square)](https://github.com/jmdobry/cachefactory/releases)\r\n\r\n__Status:__\r\n\r\n[![Dependency Status](https://img.shields.io/gemnasium/jmdobry/cachefactory.svg?style=flat-square)](https://gemnasium.com/jmdobry/cachefactory) [![Coverage Status](https://img.shields.io/coveralls/jmdobry/cachefactory/master.svg?style=flat-square)](https://coveralls.io/r/jmdobry/cachefactory?branch=master) [![Codacity](https://img.shields.io/codacy/5e27e21d0c4c4d4cb203d589384aa93a.svg?style=flat-square)](https://www.codacy.com/public/jasondobry/cachefactory/dashboard)\r\n\r\n__Supported Browsers:__\r\n\r\n[![browsers](https://img.shields.io/badge/Browser-Chrome%2CFirefox%2CSafari%2COpera%2CIE%209%2B%2CiOS%20Safari%207.1%2B%2CAndroid%20Browser%202.3%2B-green.svg?style=flat-square)](https://github.com/jmdobry/cachefactory)\r\n\r\n### Table of Contents\r\n- [Quick Start](#quick-start)\r\n- [The Basics](#the-basics)\r\n- [Working with a cache](#working-with-a-cache)\r\n- [Configuration Options](#configuration-options)\r\n- [Using CacheFactory with localStorage](#using-cachefactory-with-localstorage)\r\n- [API Reference](#api-reference)\r\n\r\n### Quick Start\r\n`bower install --save cachefactory` or `npm install --save cachefactory`.\r\n\r\n```js\r\nif (!CacheFactory.get('bookCache')) {\r\n  // or CacheFactory('bookCache', { ... });\r\n  CacheFactory.createCache('bookCache', {\r\n    deleteOnExpire: 'aggressive',\r\n    recycleFreq: 60000\r\n  });\r\n}\r\n\r\nvar bookCache = CacheFactory.get('bookCache');\r\n\r\nbookCache.put('bookOne', { title: 'BookOne', id: 1 });\r\n```\r\n\r\n### The Basics\r\n\r\nGrab `CacheFactory` then create a cache. Let's go:\r\n\r\n```js\r\nvar profileCache;\r\n\r\n// Check to make sure the cache doesn't already exist\r\nif (!CacheFactory.get('profileCache')) {\r\n  profileCache = CacheFactory('profileCache');\r\n}\r\n```\r\n\r\nLet's add some items to the cache:\r\n\r\n```js\r\nprofileCache.put('/profiles/34', {\r\n  name: 'John',\r\n  skills: ['programming', 'piano']\r\n});\r\n\r\nprofileCache.put('/profiles/22', {\r\n  name: 'Sally',\r\n  skills: ['marketing', 'climbing', 'painting']\r\n});\r\n```\r\n\r\nRight now, these items will stay in the cache until a page refresh.\r\n\r\nLet's have items which are added to `profileCache` expire after an hour:\r\n\r\n```js\r\nprofileCache = CacheFactory('profileCache', {\r\n  maxAge: 60 * 60 * 1000 // 1 hour\r\n});\r\n```\r\n\r\nPerfect. Say we also want the items removed from the cache when they expire:\r\n\r\n```js\r\nprofileCache = CacheFactory('profileCache', {\r\n  maxAge: 60 * 60 * 1000 // 1 hour,\r\n  deleteOnExpire: 'aggressive'\r\n});\r\n```\r\n\r\nLet's say that when the items do expire, we want to refresh them with new values:\r\n\r\n```js\r\nprofileCache = CacheFactory('profileCache', {\r\n  maxAge: 60 * 60 * 1000 // 1 hour,\r\n  deleteOnExpire: 'aggressive',\r\n  onExpire: function (key, value) {\r\n    myAjaxLib.get(key).success(function (data) {\r\n      profileCache.put(key, data);\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nOr say we want all of our caches to use that configuration as their default:\r\n\r\n```js\r\nmyUtils.extend(CacheFactory.defaults, {\r\n  maxAge: 3600000,\r\n  deleteOnExpire: 'aggressive',\r\n  onExpire: function (key, value) {\r\n    var _this = this; // \"this\" is the cache in which the item expired\r\n    myAjaxLib.get(key).success(function (data) {\r\n      _this.put(key, data);\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n### Working with a cache\r\n\r\nWe can retrieve items from a cache like so:\r\n\r\n```js\r\nvar profile = profileCache.get('/profiles/34');\r\n\r\nprofile.name; // 'John'\r\n```\r\n\r\nAnd get information about items in the cache:\r\n\r\n```js\r\nvar info = profileCache.info('/profiles/34');\r\n\r\ninfo.isExpired; // false\r\n// etc.\r\n```\r\n\r\nand information about the cache itself:\r\n\r\n```\r\nvar info = profileCache.info();\r\n\r\ninfo.size; // 2\r\ninfo.maxAge; // 3600000\r\ninfo.deleteOnExpire; // 'aggressive'\r\n// etc.\r\n```\r\n\r\nItems are easily removed, and we can destroy our cache when we're done with it:\r\n\r\n```js\r\nprofileCache.remove('/profiles/34');\r\n\r\nprofileCache.get('/profiles/34'); // undefined\r\n\r\nprofileCache.destroy();\r\n\r\nCacheFactory.get('profileCache'); // undefined\r\n```\r\n\r\n### Configuration Options\r\n\r\nThese options apply to:\r\n\r\n- `CacheFactory(cacheId[, options)`\r\n- `CacheFactory.createCache(cacheId[, options])`\r\n- `Cache#setOptions(options[, strict])`\r\n- `Cache#setMaxAge(maxAge)`, `Cache#setOnExpire(onExpire)`, etc.\r\n\r\n##### `cacheFlushInterval`\r\n\r\nIf set, remove all items from a cache on an interval after the given number of milliseconds. Default: `null`.\r\n\r\n##### `capacity`\r\n\r\nMaximum number of items a cache can hold. Adding more items than the capacity will cause the cache to operate like an LRU cache, removing the least recently used items to stay under capacity. Default: `Number.MAX_VALUE`.\r\n\r\n##### `deleteOnExpire`\r\n\r\nDetermines the behavior of a cache when an item expires. Default: `none`.\r\n\r\nPossible values:\r\n\r\n- `none` - Cache will do nothing when an item expires.\r\n- `passive` - Cache will do nothing when an item expires. Expired items will remain in the cache until requested, at which point they are removed, and `undefined` is returned.\r\n- `aggressive` - Cache will remove expired items as soon as they are discovered.\r\n\r\n##### `disabled`\r\n\r\nDetermines whether a cache is disabled. Default: `false`.\r\n\r\n##### `onExpire`\r\n\r\nA callback function to be executed whenever an expired item is removed from a cache when the cache is in `passive` or `aggressive` mode. Will be passed the `key` and `value` of the expired item.\r\n\r\nWill be passed a third `done` argument if the cache is in `passive` mode. This allows you to synchronously access the `key` and `value` of the expired item when you make the `Cache#get(key[, options])` call that is the reason the expired item is being removed in the first place. Default: `null`.\r\n\r\n##### `maxAge`\r\n\r\nThe number of milliseconds until a newly inserted item expires. Default: `Number.MAX_VALUE`.\r\n\r\n##### `recycleFreq`\r\n\r\nDetermines how often a cache will scan for expired items when in `aggressive` mode. Default: `1000` (milliseconds).\r\n\r\n##### `storageImpl`\r\n\r\nProvide a custom storage medium, e.g. a polyfill for `localStorage`. Default: `null`.\r\n\r\nMust implement:\r\n\r\n- `setItem` - Same API as `localStorage.setItem(key, value)`\r\n- `getItem` - Same API as `localStorage.getItem(key)`\r\n- `removeItem` - Same API as `localStorage.removeItem(key)`\r\n\r\n##### `storageMode`\r\n\r\nDetermines the storage medium used by a cache. Default: `memory`.\r\n\r\nPossible values:\r\n\r\n- `memory` - Cache will hold data in memory. Data is cleared when the page is refreshed.\r\n- `localStorage` - Cache will hold data in `localStorage` if available. Data is _not_ cleared when the page is refreshed.\r\n- `sessionStorage` - Cache will hold data in `sessionStorage` if available. Data is _not_ cleared when the page is refreshed.\r\n\r\n##### `storagePrefix`\r\n\r\nDetermines the namespace of a cache when `storageMode` is set to `localStorage` or `sessionStorage`. Make it a shorter string to save space. Default: `cachefactory.caches.`.\r\n\r\n##### `storeOnReject`\r\n\r\nIf inserting a promise into a cache, also insert the rejection value if the promise rejects. Default: `false`.\r\n\r\n##### storeOnResolve\r\n\r\nIf inserting a promise into a cache, also insert the resolved value if the promise resolves. Default: `false`.\r\n\r\n### Using cachefactory with localStorage\r\n\r\n```js\r\n// This cache will sync itself with localStorage if it exists, otherwise it won't. Every time the\r\n// browser loads this app, this cache will attempt to initialize itself with any data it had\r\n// already saved to localStorage (or sessionStorage if you used that).\r\nvar myAwesomeCache = CacheFactory('myAwesomeCache', {\r\n  maxAge: 15 * 60 * 1000, // Items added to this cache expire after 15 minutes.\r\n  cacheFlushInterval: 60 * 60 * 1000, // This cache will clear itself every hour.\r\n  deleteOnExpire: 'aggressive', // Items will be deleted from this cache right when they expire.\r\n  storageMode: 'localStorage' // This cache will use `localStorage`.\r\n});\r\n```\r\n\r\nUsing cachefactory in browsers that DON'T support localStorage:\r\n\r\nOption 1 - Do nothing (the cache will just store data in memory)\r\n\r\nOption 2 - Create/use a polyfill that provides the global `localStorage` and `sessionStorage` objects. cachefactory will attempt to use these if it finds them.\r\n\r\nOption 3 - Tell cachefactory exactly which polyfill to use (also useful if you just want to use your own implementation/wrapper for localStorage):\r\n\r\n```js\r\nvar localStoragePolyfill = {\r\n  getItem: function (key) { ... },\r\n  setItem: function (key, value) { ... },\r\n  removeItem: function (key) { ... }\r\n};\r\n\r\n// Always use the polyfill\r\nvar myAwesomeCache = CacheFactory('myAwesomeCache', {\r\n  maxAge: 15 * 60 * 1000, // Items added to this cache expire after 15 minutes.\r\n  cacheFlushInterval: 60 * 60 * 1000, // This cache will clear itself every hour.\r\n  deleteOnExpire: 'aggressive', // Items will be deleted from this cache right when they expire.\r\n  storageMode: 'localStorage', // This cache will use `localStorage`.\r\n  storageImpl: localStoragePolyfill // cachefactory will use this polyfill instead of looking for localStorage\r\n});\r\n\r\n// Conditionally use the polyfill\r\nvar options = {\r\n  maxAge: 15 * 60 * 1000, // Items added to this cache expire after 15 minutes.\r\n  cacheFlushInterval: 60 * 60 * 1000, // This cache will clear itself every hour.\r\n  deleteOnExpire: 'aggressive', // Items will be deleted from this cache right when they expire.\r\n  storageMode: 'localStorage' // This cache will use `localStorage`.\r\n};\r\nif (!window.localStorage) {\r\n  options.storageImpl = localStoragePolyfill;\r\n}\r\nvar myAwesomeCache = CacheFactory('myAwesomeCache', options);\r\n```\r\n\r\nDocumentation on the interface that must be implemented by any storageImpl polyfill used by cachefactory can be found on the W3C Recommendation page for webstorage. The interface itself looks like:\r\n\r\n```\r\ninterface Storage {\r\n  readonly attribute unsigned long length;\r\n  DOMString? key(unsigned long index);\r\n  getter DOMString getItem(DOMString key);\r\n  setter creator void setItem(DOMString key, DOMString value);\r\n  deleter void removeItem(DOMString key);\r\n  void clear();\r\n};\r\n```\r\n\r\ncachefactory cares only about these three methods:\r\n\r\n- `setItem`\r\n- `getItem`\r\n- `removeItem`\r\n\r\nOne developer suggested using store.js–a wrapper and polyfill for localStorage. However, store.js has its own API that doesn't match that of the webstorage spec, so if you want to use store.js or any other 3rd-party polyfill then you'll need to create a wrapper for it if it doesn't have the same API as localStorage . For example:\r\n\r\n```js\r\nvar storeJsToStandard {\r\n  getItem: store.get,\r\n  setItem: store.set,\r\n  removeItem: store.remove\r\n};\r\n\r\nCacheFactory('myNewCache', {\r\n  storageMode: 'localStorage',\r\n  storageImpl: storeJsToStandard\r\n});\r\n```\r\n\r\n### API Reference\r\n\r\n##### `CacheFactory(cacheId[, options])` & `CacheFactory.createCache(cacheId[, options])`\r\n\r\nCreate a cache. Cache must not already exist. `cacheId` must be a string. `options` is an optional argument and must be an object. Any options you pass here will override any default options.\r\n\r\n```js\r\nvar cache = CacheFactory('cache');\r\nvar cache2 = CacheFactory.createCache('cache2');\r\nvar cache3 = CacheFactory('cache', { maxAge: 900000 });\r\nvar cache4 = CacheFactory('cache'); // Error \"cache already exists!\"\r\n```\r\n\r\n##### `CacheFactory.get(cacheId)`\r\n\r\nReturn the cache with the given `cacheId`.\r\n\r\n##### `CacheFactory.info()`\r\n\r\nReturn an object of key-value pairs, the keys being cache ids and the values being the result of `.info()` being called on each cache.\r\n\r\n##### `CacheFactory.keySet()`\r\n\r\nReturn the ids of all registered caches as an object.\r\n\r\n##### `CacheFactory.keys()`\r\n\r\nReturn the ids of all registered caches as an array.\r\n\r\n##### `CacheFactory.destroy(cacheId)`\r\n\r\nDestroy the cache with the given `cacheId`.\r\n\r\n##### `CacheFactory.destroyAll()`\r\n\r\nDestroy all registered caches.\r\n\r\n##### `CacheFactory.clearAll()`\r\n\r\nRemove all data from all registered caches.\r\n\r\n##### `CacheFactory.enableAll()`\r\n\r\nEnable all registered caches.\r\n\r\n##### `CacheFactory.disableAll()`\r\n\r\nDisable all registered caches.\r\n\r\n##### `CacheFactory.touchAll()`\r\n\r\nCall `.touch()` on all registered caches.\r\n\r\n##### `CacheFactory.removeExpiredFromAll()`\r\n\r\nCall `.removeExpired()` on all registered caches. Returns a hash of any expired items, keyed by cache id.\r\n\r\n##### `Cache#get(key[, options])`\r\n\r\nReturn the item with the given `key`. `options`, if provided, must be an object.\r\n\r\nIf the cache is in `passive` mode, then `options.onExpire` can be a function that will be called with the `key` and `value` of the requested item if the requested item is expired, with the `get` call itself returning undefined.\r\n\r\n##### `Cache#put(key, value[, options])`\r\n\r\nInsert the item with the given `key` and `value` into the cache. `options`, if provided, must be an object.\r\n\r\nIf inserting a promise, `options.storeOnReject` determines whether to insert the rejection value if the promise rejects (overriding the default `storeOnReject` setting for the cache).\r\nIf inserting a promise, `options.storeOnResolve` determines whether to insert the resolved value if the promise resolves (overriding the default `storeOnResolve` setting for the cache).\r\n\r\n##### `Cache.remove(key)`\r\n\r\nRemove and return the item with the given `key`, if it is in the cache.\r\n\r\n##### `Cache.removeAll()`\r\n\r\nRemove all items in the cache.\r\n\r\n##### `Cache.removeExpired()`\r\n\r\nRemove and return all expired items in the cache.\r\n\r\n##### `Cache.destroy()`\r\n\r\nCompletely destroy this cache and its data.\r\n\r\n##### `Cache#info([key])`\r\n\r\n`Cache#info()` returns an object containing information about the cache.\r\n\r\n`Cache#info(key)` returns an object containing information about the item with the given `key`, if the item is in the cache.\r\n\r\n##### `Cache#keySet()`\r\n\r\nReturn the keys of all items in the cache as an object.\r\n\r\n##### `Cache#keys()`\r\n\r\nReturn the keys of all items in the cache as an array.\r\n\r\n##### `Cache#enable()`\r\n\r\nEnable the cache.\r\n\r\n##### `Cache#disable()`\r\n\r\nDisable the cache.\r\n\r\n##### `Cache#touch([key])`\r\n\r\n`Cache#touch()` will \"touch\" all items in the cache.\r\n`Cache#touch(key)` will \"touch\" the item with the given `key`.\r\n\r\n##### `Cache#setCacheFlushInterval(cacheFlushInterval)`\r\n\r\nSet the `cacheFlushInterval` for the cache.\r\n\r\n##### `Cache#setCapacity(capacity)`\r\n\r\nSet the `capacity` for the cache. Setting this lower than the current item count will result in those items being removed.\r\n\r\n##### `Cache#setDeleteOnExpire(deleteOnExpire)`\r\n\r\nSet the `deleteOnExpire` for the cache.\r\n\r\n##### `Cache#setMaxAge(maxAge)`\r\n\r\nSet the `maxAge` for the cache.\r\n\r\n##### `Cache#setOnExpire(onExpire)`\r\n\r\nSet the `onExpire` for the cache.\r\n\r\n##### `Cache#setRecycleFreq(recycleFreq)`\r\n\r\nSet the `recycleFreq` for the cache.\r\n\r\n##### `Cache#setStorageMode(storageMode)`\r\n\r\nSet the `storageMode` for the cache. This will move data from the current storage medium to the new one.\r\n\r\n##### `Cache#setOptions(options[, strict])`\r\n\r\nSet multiple options for the cache at a time. Setting `strict` to `true` will reset options for the cache that are not specifically set in the `options` hash to `CacheFactoryProvider.defaults`.\r\n\r\n### License\r\n[MIT License](https://github.com/jmdobry/cachefactory/blob/master/LICENSE)\r\n\r\nCopyright (C) 2015 Jason Dobry\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}